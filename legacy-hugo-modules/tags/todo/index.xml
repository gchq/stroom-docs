<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stroom â€“ TODO</title>
    <link>/tags/todo/</link>
    <description>Recent content in TODO on Stroom</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 12 Jan 2022 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/tags/todo/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Community: Building the Documentation</title>
      <link>/community/documentation/building/</link>
      <pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/community/documentation/building/</guid>
      <description>
        
        
        &lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;In order to build and contribute to the documentation you will need the following installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bash&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;Docker (external link)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker is required as all the build steps are performed in docker containers to ensure a consistent and known build environment.
It also ensures that the local build environment matches that used in GitHub actions.&lt;/p&gt;
&lt;p&gt;It is possible to build the docs without docker but you would need to install all the other dependencies that are provided in the docker images, e.g. java, plantuml, puppeteer, hugo, npm, html2canvas, jspdf, graphviz etc.&lt;/p&gt;
&lt;h2 id=&#34;cloning-the-stroom-docs-git-repository&#34;&gt;Cloning the stroom-docs git repository&lt;/h2&gt;
&lt;p&gt;The git repository for this site is &lt;a href=&#34;https://github.com/gchq/stroom-docs&#34;&gt;stroom-docs (external link)&lt;/a&gt;.
&lt;em&gt;stroom-docs&lt;/em&gt; uses the Docsy theme (&lt;code&gt;themes/docsy/&lt;/code&gt;) via a git sub-module, which in turn uses two nested sub-modules for Bootstrap (&lt;code&gt;themes/docsy/assets/vendor/bootstrap/&lt;/code&gt;) and Font-Awesome (&lt;code&gt;themes/docsy/assets/vendor/Font-Awesome/&lt;/code&gt;).
Therefore to clone stroom-docs you need to do&lt;/p&gt;

  






&lt;div class=&#34;code-toolbar&#34;&gt;
  &lt;pre 
    class=&#34;command-line language-bash&#34; 
    data-user=&#34;user&#34; 
    data-host=&#34;localhost&#34; 
    data-continuation-str=&#34;\&#34;
    data-filter-output=&#34;(out)&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone the repo
git clone https://github.com/gchq/stroom-docs.git
(out)Cloning into &amp;#39;stroom-docs&amp;#39;...
(out)remote: Enumerating objects: 66006, done.
(out)remote: Counting objects: 100% (7916/7916), done.
(out)remote: Compressing objects: 100% (1955/1955), done.
(out)remote: Total 66006 (delta 3984), reused 7417 (delta 3603), pack-reused 58090
(out)Receiving objects: 100% (66006/66006), 286.61 MiB | 7.31 MiB/s, done.
(out)Resolving deltas: 100% (34981/34981), done.
cd stroom-docs
(out)
# Download all sub modules
git submodule update --init --recursive
(out)Submodule &amp;#39;themes/docsy&amp;#39; (https://github.com/google/docsy.git) registered for path &amp;#39;themes/docsy&amp;#39;
(out)Cloning into &amp;#39;/tmp/stroom-docs/themes/docsy&amp;#39;...
(out)...
(out)Submodule &amp;#39;assets/vendor/Font-Awesome&amp;#39; (https://github.com/FortAwesome/Font-Awesome.git) registered for path &amp;#39;themes/docsy/assets/vendor/Font-Awesome&amp;#39;
(out)Submodule &amp;#39;assets/vendor/bootstrap&amp;#39; (https://github.com/twbs/bootstrap.git) registered for path &amp;#39;themes/docsy/assets/vendor/bootstrap&amp;#39;
(out)Cloning into &amp;#39;/tmp/stroom-docs/themes/docsy/assets/vendor/Font-Awesome&amp;#39;...
(out)Cloning into &amp;#39;/tmp/stroom-docs/themes/docsy/assets/vendor/bootstrap&amp;#39;...
(out)...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&#34;converting-the-plantuml-files-to-svg&#34;&gt;Converting the PlantUML files to SVG&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;stroom-docs&lt;/em&gt; makes used of &lt;a href=&#34;https://plantuml.com&#34;&gt;PlantUML (external link)&lt;/a&gt; for a lot of its diagrams.
These are stored in the repository as &lt;code&gt;.puml&lt;/code&gt; text files.
In order that they can be rendered in the site they need to be converted into SVGs first.&lt;/p&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;


    Docsy has the capability to render PlantUML content in fenced code blocks on the fly.
This capability makes use of internet based servers to do the conversion therefore it is not suitable for this site as this site needs to available for deployment in environments with no internet access.
All PlantUML content should authored in &lt;code&gt;.puml&lt;/code&gt; files and converted at build time.

&lt;/div&gt;


&lt;p&gt;To convert all &lt;code&gt;.puml&lt;/code&gt; files into sibling &lt;code&gt;.puml.svg&lt;/code&gt; files do the following:&lt;/p&gt;

  






&lt;div class=&#34;code-toolbar&#34;&gt;
  &lt;pre 
    class=&#34;command-line language-bash&#34; 
    data-user=&#34;user&#34; 
    data-host=&#34;localhost&#34; 
    data-continuation-str=&#34;\&#34;
    data-filter-output=&#34;(out)&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;./container_build/runInPumlDocker.sh SVG&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command will find all &lt;code&gt;.puml&lt;/code&gt; files (in &lt;code&gt;content/&lt;/code&gt; and &lt;code&gt;assets/&lt;/code&gt;) and convert each one to SVG.
It only needs to be run on first clone of the repo or when &lt;code&gt;.puml&lt;/code&gt; files are added/changed.
The generated &lt;code&gt;.puml.svg&lt;/code&gt; files are ignored by git.
This command will be run as part of the GitHub Actions automated build.&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;

    &lt;p&gt;If &lt;code&gt;runInPumlDocker.sh SVG&lt;/code&gt; is not run having added links to PlantUML images in the documentation, then when you build or serve the site you will see errors like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Error: Error building site: &amp;quot;/builder/shared/content/en/docs/user-guide/concepts/streams.md:57:1&amp;quot;:
failed to render shortcode &amp;quot;image&amp;quot;:
failed to process shortcode: &amp;quot;/builder/shared/layouts/shortcodes/image.html:54:21&amp;quot;:
execute of template failed: template: shortcodes/image.html:54:21:
executing &amp;quot;shortcodes/image.html&amp;quot; at &amp;lt;$image.Name&amp;gt;: nil pointer evaluating resource.Resource.Name
&lt;/code&gt;&lt;/pre&gt;


&lt;/div&gt;



&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;


    In the build docker containers your local &lt;em&gt;stroom-docs&lt;/em&gt; repository is mounted into the container as &lt;code&gt;/builder/shared/&lt;/code&gt;, so if you see this path mentioned in the logs this is referring to your local repository.

&lt;/div&gt;


&lt;h2 id=&#34;running-a-local-server&#34;&gt;Running a local server&lt;/h2&gt;
&lt;p&gt;The documentation can be built and served locally while developing it.
To build and serve the site run&lt;/p&gt;

  






&lt;div class=&#34;code-toolbar&#34;&gt;
  &lt;pre 
    class=&#34;command-line language-bash&#34; 
    data-user=&#34;user&#34; 
    data-host=&#34;localhost&#34; 
    data-continuation-str=&#34;\&#34;
    data-filter-output=&#34;(out)&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;./container_build/runInHugoDocker.sh server&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This uses Hugo to build the site in memory and then serve it from a local web server.
When any source files are changed or added Hugo will detect this and rebuild the site as required, including automatically refreshing the browser page to update the rendered view.&lt;/p&gt;
&lt;p&gt;Once the server is running the site is available at &lt;a href=&#34;http://localhost:1313/stroom-docs&#34;&gt;localhost:1313/stroom-docs&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;

    Sometimes changes made to the site source will not be re-loaded correctly so it may be necessary to stop and re-start the server.

&lt;/div&gt;


&lt;h2 id=&#34;building-the-site-locally&#34;&gt;Building the site locally&lt;/h2&gt;
&lt;p&gt;To perform a full build of the static site run:&lt;/p&gt;

  






&lt;div class=&#34;code-toolbar&#34;&gt;
  &lt;pre 
    class=&#34;command-line language-bash&#34; 
    data-user=&#34;user&#34; 
    data-host=&#34;localhost&#34; 
    data-continuation-str=&#34;\&#34;
    data-filter-output=&#34;(out)&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;./container_build/runInHugoDocker.sh build&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will generate all the static content and place it in &lt;code&gt;public/&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;generating-the-pdf&#34;&gt;Generating the PDF&lt;/h2&gt;
&lt;p&gt;Every page has a &lt;em&gt;Print entire section&lt;/em&gt; link that will display a printable view of that section and its children.
In addition to this the GitHub Actions we generate a PDF of the &lt;code&gt;docs&lt;/code&gt; section and all its children, i.e. all of the documentation (but not News/Releases or Community) in one PDF.
This makes the documentation available for offline use.&lt;/p&gt;
&lt;p&gt;To test the PDF generation do:&lt;/p&gt;

  






&lt;div class=&#34;code-toolbar&#34;&gt;
  &lt;pre 
    class=&#34;command-line language-bash&#34; 
    data-user=&#34;user&#34; 
    data-host=&#34;localhost&#34; 
    data-continuation-str=&#34;\&#34;
    data-filter-output=&#34;(out)&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;./container_build/runInPupeteerDocker.sh PDF&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&#34;updating-the-docsy-theme&#34;&gt;Updating the Docsy theme&lt;/h2&gt;
&lt;p&gt;This repository uses a git submodule for the Docsy theme.&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;TODO&lt;/h4&gt;

    Complete this section.
Docsy is undergoing changes to make use of shallow sub modules for Bootstrap/Font-Awesome and to change to being a Hugo module so maybe wait until that is complete.
Cover how to update the submodule to the latest (or a specific) Docsy commit.
Warn of implications of breaking the site when updating with incompatible upstream changes.

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Community: Developing Content</title>
      <link>/community/content/</link>
      <pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/community/content/</guid>
      <description>
        
        
        
&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;TODO&lt;/h4&gt;

    Add content

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Community: Building the documentation</title>
      <link>/community/dev-guide/documentation-dev/</link>
      <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/community/dev-guide/documentation-dev/</guid>
      <description>
        
        
        &lt;p&gt;Stroom&amp;rsquo;s documentation is built using &lt;a href=&#34;https://www.gitbook.com&#34;&gt;GitBook (external link)&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;h3 id=&#34;npm&#34;&gt;NPM&lt;/h3&gt;
&lt;p&gt;You need NPM to install the GitBook command line toolchain. To get NPM install &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node (external link)&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;gitbook-command-line-tools&#34;&gt;GitBook command line tools&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g gitbook-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;build-the-book&#34;&gt;Build the book&lt;/h2&gt;
&lt;p&gt;GitBook uses plugins, e.g. anchorjs allows us to create links to headings within a file. You need to install these plugins first. The below commands should be run in the project root.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gitbook install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can build the documentation like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gitbook build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can run the GitBook server which will watch your files as you work and server them on &lt;code&gt;localhost:4000&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gitbook serve
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;
&lt;h3 id=&#34;i-get-an-error-when-trying-to-run-gitbook-serve&#34;&gt;I get an error when trying to run &lt;code&gt;gitbook serve&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If you see &lt;code&gt;Errpr: watch /path/to/stroom ENOSPC&lt;/code&gt; then run the following:
&lt;code&gt;echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;amp;&amp;amp; sudo sysctl -p&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;links-dont-work-when-i-load-_bookindexhtml&#34;&gt;Links don&amp;rsquo;t work when I load &lt;code&gt;_book/index.html&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;It won&amp;rsquo;t, because &lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&#34;&gt;CORS&lt;/a&gt; is not and cannot be enabled when viewing local files. You need to run &lt;code&gt;gitbook serve&lt;/code&gt; or if you really don&amp;rsquo;t want to do that try &lt;code&gt;cd _book &amp;amp;&amp;amp; python -m SimpleHTTPServer&lt;/code&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Dictionaries</title>
      <link>/docs/user-guide/dashboards/dictionaries/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-guide/dashboards/dictionaries/</guid>
      <description>
        
        
        &lt;h2 id=&#34;creating&#34;&gt;Creating&lt;/h2&gt;
&lt;p&gt;Right click on a folder in the explorer tree that you want to create a dictionary in. Choose â€˜New/Dictionaryâ€™ from the popup menu:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;: Fix image&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Call the dictionary something like â€˜My Dictionaryâ€™ and click OK.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;: Fix image&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now just add any search terms you want to the newly created dictionary and click save.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;: Fix image&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can add multiple terms.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Terms on separate lines act as if they are part of an &amp;lsquo;OR&amp;rsquo; expression when used in a search.&lt;/li&gt;
&lt;li&gt;Terms on a single line separated by spaces act as if they are part of an &amp;lsquo;AND&amp;rsquo; expression when used in a search.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;using&#34;&gt;Using&lt;/h2&gt;
&lt;p&gt;To perform a search using your dictionary, just choose the newly created dictionary as part of your search expression:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;: Fix image&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Nodes</title>
      <link>/docs/user-guide/nodes/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-guide/nodes/</guid>
      <description>
        
        
        &lt;p&gt;All nodes in an Stroom cluster must be configured correctly for them to communicate with each other.&lt;/p&gt;
&lt;h2 id=&#34;configuring-nodes&#34;&gt;Configuring nodes&lt;/h2&gt;
&lt;p&gt;Open Monitoring/Nodes from the top menu. The nodes screen looks like this:&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;TODO&lt;/h4&gt;

    Screenshot

&lt;/div&gt;

&lt;p&gt;You need to edit each line by selecting it and then clicking the edit 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/edit.svg&#34; 
  title=&#34;Edit&#34; 
  alt=&#34;edit.svg&#34;&gt;
 icon at the bottom.
The URL for each node needs to be set as above but obviously substituting in the host name of the individual node, e.g. &lt;code&gt;http://&amp;lt;HOST_NAME&amp;gt;:8080/stroom/clustercall.rpc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Nodes are expected communicate with each other on port 8080 over http.
Ensure you have configured your firewall to allow nodes to talk to each other over this port.
You can configure the URL to use a different port and possibly HTTPS but performance will be better with HTTP as no SSL termination is required.&lt;/p&gt;
&lt;p&gt;Once you have set the URLs of each node you should also set the master assignment priority for each node to be different to all of the others.
In the image above the priorities have been set in a random fashion to ensure that node3 assumes the role of master node for as long as it is enabled.
You also need to check all of the nodes are enabled that you want to take part in processing or any other jobs.&lt;/p&gt;
&lt;p&gt;Keep refreshing the table until all nodes show healthy pings as above.
If you do not get ping results for each node then they are not configured correctly.&lt;/p&gt;
&lt;p&gt;Once a cluster is configured correctly you will get proper distribution of processing tasks and search will be able to access all nodes to take part in a distributed query.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Roles</title>
      <link>/docs/user-guide/roles/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-guide/roles/</guid>
      <description>
        
        
        
&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;TODO&lt;/h4&gt;

    Describe application level permissions and how users and groups behave

&lt;/div&gt;


      </description>
    </item>
    
  </channel>
</rss>
