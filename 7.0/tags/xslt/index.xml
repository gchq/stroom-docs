<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stroom â€“ xslt</title>
    <link>/tags/xslt/</link>
    <description>Recent content in xslt on Stroom</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 27 Jul 2021 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/tags/xslt/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: XSLT Conversion</title>
      <link>/docs/user-guide/pipelines/xslt/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-guide/pipelines/xslt/</guid>
      <description>
        
        
        &lt;p&gt;Once the text file has been converted into Intermediary XML (or the feed is already XML), XSLT is used to
translate the XML into event logging XML format.&lt;/p&gt;
&lt;p&gt;Event Feeds must be translated into the events schema and Reference
into the reference schema. You can browse documentation relating to the
schemas within the application.&lt;/p&gt;
&lt;p&gt;Here is an example XSLT:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;xsl:stylesheet
    xmlns=&amp;quot;event-logging:3&amp;quot;
    xmlns:s=&amp;quot;stroom&amp;quot;
    xmlns:xsl=&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
    version=&amp;quot;2.0&amp;quot;&amp;gt;

    &amp;lt;xsl:template match=&amp;quot;SomeData&amp;quot;&amp;gt;
        &amp;lt;Events
        xsi:schemaLocation=&amp;quot;event-logging:3 file://event-logging-v3.0.0.xsd&amp;quot;
        Version=&amp;quot;3.0.0&amp;quot;&amp;gt;
            &amp;lt;xsl:apply-templates/&amp;gt;
        &amp;lt;/Events&amp;gt;
    &amp;lt;/xsl:template&amp;gt;
    &amp;lt;xsl:template match=&amp;quot;SomeEvent&amp;quot;&amp;gt;
        &amp;lt;xsl:variable name=&amp;quot;dateTime&amp;quot; select=&amp;quot;SomeTime&amp;quot;/&amp;gt;
        &amp;lt;xsl:variable name=&amp;quot;formattedDateTime&amp;quot; select=&amp;quot;s:format-date($dateTime, &#39;dd/MM/yyyyhh:mm:ss&#39;)&amp;quot;/&amp;gt;

        &amp;lt;xsl:if test=&amp;quot;SomeAction = &#39;OPEN&#39;&amp;quot;&amp;gt;
            &amp;lt;Event&amp;gt;
            &amp;lt;EventTime&amp;gt;
                &amp;lt;TimeCreated&amp;gt;
                    &amp;lt;xsl:value-of select=&amp;quot;$formattedDateTime&amp;quot;/&amp;gt;
                &amp;lt;/TimeCreated&amp;gt;
            &amp;lt;/EventTime&amp;gt;
            &amp;lt;EventSource&amp;gt;
                &amp;lt;System&amp;gt;Example&amp;lt;/System&amp;gt;
                &amp;lt;Environment&amp;gt;Example&amp;lt;/Environment&amp;gt;
                &amp;lt;Generator&amp;gt;Very Simple Provider&amp;lt;/Generator&amp;gt;
                &amp;lt;Device&amp;gt;
                    &amp;lt;IPAddress&amp;gt;3.3.3.3&amp;lt;/IPAddress&amp;gt;
                &amp;lt;/Device&amp;gt;
                &amp;lt;User&amp;gt;
                    &amp;lt;Id&amp;gt;&amp;lt;xsl:value-of select=&amp;quot;SomeUser&amp;quot;/&amp;gt;&amp;lt;/Id&amp;gt;
                &amp;lt;/User&amp;gt;
            &amp;lt;/EventSource&amp;gt;
            &amp;lt;EventDetail&amp;gt;
                &amp;lt;View&amp;gt;
                    &amp;lt;Document&amp;gt;
                        &amp;lt;Title&amp;gt;UNKNOWN&amp;lt;/Title&amp;gt;
                        &amp;lt;File&amp;gt;
                        &amp;lt;Path&amp;gt;&amp;lt;xsl:value-of select=&amp;quot;SomeFile&amp;quot;/&amp;gt;&amp;lt;/Path&amp;gt;
                        &amp;lt;File&amp;gt;
                    &amp;lt;/Document&amp;gt;
                &amp;lt;/View&amp;gt;
            &amp;lt;/EventDetail&amp;gt;
            &amp;lt;/Event&amp;gt;
        &amp;lt;/xsl:if&amp;gt;
    &amp;lt;/xsl:template&amp;gt;
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Indexing</title>
      <link>/docs/quick-start-guide/indexing/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/quick-start-guide/indexing/</guid>
      <description>
        
        
        &lt;p&gt;Before you can visualise your data with dashboards you have to 



&lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#index&#34; title=&#34;Glossary entry for index&#34;&gt;
    &lt;span&gt;index&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;
 the data.&lt;/p&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;


    Stroom uses Apache Lucene for indexing its data but can also can also integrate with Solr and Elastic Search.
For this Quick Start Guide we are going to use Stroom&amp;rsquo;s internal Lucence indexing.

&lt;/div&gt;


&lt;h2 id=&#34;create-the-index&#34;&gt;Create the index&lt;/h2&gt;
&lt;p&gt;We can create an index by adding an index entity 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/document/Index.svg&#34; 
  title=&#34;Index&#34; 
  alt=&#34;document/Index.svg&#34;&gt;
to the explorer tree.
You do this in the same way you create any of the items.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Right click on the &lt;em&gt;Stroom 101&lt;/em&gt; folder.&lt;/li&gt;
&lt;li&gt;Click 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/add.svg&#34; 
  title=&#34;New&#34; 
  alt=&#34;add.svg&#34;&gt;
 New =&amp;gt; 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/document/Index.svg&#34; 
  title=&#34;Index&#34; 
  alt=&#34;document/Index.svg&#34;&gt;
 Index.&lt;/li&gt;
&lt;li&gt;Call the index &lt;em&gt;Stroom 101&lt;/em&gt;.
Click OK.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will open the new &lt;em&gt;Stroom 101&lt;/em&gt; index as a new tab.&lt;/p&gt;
&lt;h2 id=&#34;assign-a-volume-group&#34;&gt;Assign a volume group&lt;/h2&gt;
&lt;p&gt;In the settings tab we need to specify the 



&lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#volume&#34; title=&#34;Glossary entry for Volume&#34;&gt;
    &lt;span&gt;Volume&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;
 where we will store our index shards.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click the &lt;em&gt;Settings&lt;/em&gt; sub-tab.&lt;/li&gt;
&lt;li&gt;In the &lt;em&gt;Volume Group&lt;/em&gt; dropdown select &lt;em&gt;Default Volume Group&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Click the 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/save.svg&#34; 
  title=&#34;Save&#34; 
  alt=&#34;save.svg&#34;&gt;
 button.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;adding-fields&#34;&gt;Adding fields&lt;/h2&gt;
&lt;p&gt;Now you need to add fields to this index.&lt;/p&gt;
&lt;p&gt;The fields in the index may map 1:1 with the fields in the source data but you may want to index only a sub-set of the fields, e.g. if you would only ever want to filter the data on certain fields.
Fields can also be created that are an abstraction of multiple fields in the data, e.g. adding all text in the record into one field to allow filtering on some text appearing anywhere in the record/event.&lt;/p&gt;
&lt;p&gt;Click the &lt;em&gt;Fields&lt;/em&gt; sub-tab.&lt;/p&gt;
&lt;p&gt;We need to create fields in our index to match the fields in our source data so that we can query against them.&lt;/p&gt;
&lt;p&gt;Click on the 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/add.svg&#34; 
  title=&#34;Add&#34; 
  alt=&#34;add.svg&#34;&gt;
 button to add a new index field.&lt;/p&gt;







  
  
  
  
  







  



&lt;div class=&#34;card rounded shadow-stroom p-2 td-post-card mb-4 mt-4&#34; style=&#34;width: fit-content;&#34;&gt;

  &lt;a title=&#34;images/quick-start-guide/index/006_index_field.png&#34; href=&#34;../../images/quick-start-guide/index/006_index_field.png&#34;&gt;
    &lt;figure style=&#34;margin-block-end: 0px&#34; &gt;
      
      &lt;img class=&#34;card-img-top&#34; src=&#34;../../images/quick-start-guide/index/006_index_field.png&#34; style=&#34;max-width: fit-content&#34; alt=&#34;images/quick-start-guide/index/006_index_field.png&#34;&gt;
      

      
      &lt;div class=&#34;card-body px-0 pt-2 pb-0&#34;&gt;
        &lt;hr style=&#34;border-top: 1px solid #ddd; margin-top: 0px; margin-bottom:4px;&#34;&gt;
        &lt;figcaption class=&#34;card-text&#34; style=&#34;font-size: smaller; text-align: center;&#34;&gt;Creating an index field&lt;/figcaption&gt;
      &lt;/div&gt;
      
    &lt;/figure&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Now create the fields using these values.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Store&lt;/th&gt;
&lt;th&gt;Index&lt;/th&gt;
&lt;th&gt;Positions&lt;/th&gt;
&lt;th&gt;Analyser&lt;/th&gt;
&lt;th&gt;Case Sensitive&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;StreamId&lt;/td&gt;
&lt;td&gt;Id&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Keyword&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EventId&lt;/td&gt;
&lt;td&gt;Id&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Keyword&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Id&lt;/td&gt;
&lt;td&gt;Id&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Keyword&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Guid&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Keyword&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FromIp&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Keyword&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ToIp&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Keyword&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Application&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Alpha numeric&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;


    There are two mandatory fields that need to be added: &lt;code&gt;StreamId&lt;/code&gt; and &lt;code&gt;EventId&lt;/code&gt;.
These are not in the source records but are assigned to cooked events/records by Stroom.
You will see later how these fields get populated.

&lt;/div&gt;


&lt;p&gt;You should now have:&lt;/p&gt;







  
  
  
  
  







  



&lt;div class=&#34;card rounded shadow-stroom p-2 td-post-card mb-4 mt-4&#34; style=&#34;width: fit-content;&#34;&gt;

  &lt;a title=&#34;images/quick-start-guide/index/007_index_field_list.png&#34; href=&#34;../../images/quick-start-guide/index/007_index_field_list.png&#34;&gt;
    &lt;figure style=&#34;margin-block-end: 0px&#34; &gt;
      
      &lt;img class=&#34;card-img-top&#34; src=&#34;../../images/quick-start-guide/index/007_index_field_list.png&#34; style=&#34;max-width: fit-content&#34; alt=&#34;images/quick-start-guide/index/007_index_field_list.png&#34;&gt;
      

      
      &lt;div class=&#34;card-body px-0 pt-2 pb-0&#34;&gt;
        &lt;hr style=&#34;border-top: 1px solid #ddd; margin-top: 0px; margin-bottom:4px;&#34;&gt;
        &lt;figcaption class=&#34;card-text&#34; style=&#34;font-size: smaller; text-align: center;&#34;&gt;Index field list&lt;/figcaption&gt;
      &lt;/div&gt;
      
    &lt;/figure&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;When you&amp;rsquo;ve done that, save the new index by clicking the 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/save.svg&#34; 
  title=&#34;Save&#34; 
  alt=&#34;save.svg&#34;&gt;
 button.&lt;/p&gt;
&lt;h2 id=&#34;create-empty-index-xslt&#34;&gt;Create empty index XSLT&lt;/h2&gt;
&lt;p&gt;In order for Stroom to index the data, an 



&lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#xslt&#34; title=&#34;Glossary entry for XSLT&#34;&gt;
    &lt;span&gt;XSLT&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;
 is required to convert the event XML into an Index record.
This can be a simple 1:1 mapping from event field to index field or something more complex, e.g. combining multiple event fields into one index field.&lt;/p&gt;
&lt;p&gt;To create the XSLT for the Index:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Right click on the &lt;em&gt;Stroom 101&lt;/em&gt; folder 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/folder.svg&#34; 
  title=&#34;Folder&#34; 
  alt=&#34;folder.svg&#34;&gt;
 in the explorer tree.&lt;/li&gt;
&lt;li&gt;Click 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/add.svg&#34; 
  title=&#34;New&#34; 
  alt=&#34;add.svg&#34;&gt;
 New =&amp;gt; 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/document/XSLT.svg&#34; 
  title=&#34;XSLT&#34; 
  alt=&#34;document/XSLT.svg&#34;&gt;
 XSLT.&lt;/li&gt;
&lt;li&gt;Name it &lt;code&gt;Stroom 101&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Click OK.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will add the XSLT content later on.&lt;/p&gt;
&lt;h2 id=&#34;index-pipeline&#34;&gt;Index pipeline&lt;/h2&gt;
&lt;p&gt;Now we are going to create a pipeline to send the processed data (&lt;em&gt;Events&lt;/em&gt;) to the index we just created.
Typically in Stroom all 



&lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#raw-events&#34; title=&#34;Glossary entry for Raw Events&#34;&gt;
    &lt;span&gt;Raw Events&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;
 are first processed into normalised 



&lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#events&#34; title=&#34;Glossary entry for Events&#34;&gt;
    &lt;span&gt;Events&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;
 conforming to the same XML schema to allow common onward processing of events from all sources.&lt;/p&gt;
&lt;p&gt;We will create a pipeline to index the processed &lt;em&gt;Event&lt;/em&gt; streams containing XML data.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Right click on the &lt;em&gt;Stroom 101&lt;/em&gt; folder 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/folder.svg&#34; 
  title=&#34;Folder&#34; 
  alt=&#34;folder.svg&#34;&gt;
 in the explorer tree.&lt;/li&gt;
&lt;li&gt;Click 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/add.svg&#34; 
  title=&#34;New&#34; 
  alt=&#34;add.svg&#34;&gt;
 New =&amp;gt; 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/document/Pipeline.svg&#34; 
  title=&#34;Pipeline&#34; 
  alt=&#34;document/Pipeline.svg&#34;&gt;
 XSLT.&lt;/li&gt;
&lt;li&gt;Name it &lt;code&gt;Stroom 101&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Click OK.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Select the &lt;em&gt;Structure&lt;/em&gt; sub-tab to edit the structure of the pipeline.&lt;/p&gt;
&lt;p&gt;Pipelines can inherit from other pipelines in Stroom so that you can benefit from re-use.
We will inherit from an existing indexing template pipeline and then modify it for our needs.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On the &lt;em&gt;Structure&lt;/em&gt; sub tab, click the &lt;code&gt;...&lt;/code&gt; in the &lt;em&gt;Inherit From&lt;/em&gt; entity picker.&lt;/li&gt;
&lt;li&gt;Select 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/folder.svg&#34; 
  title=&#34;Folder&#34; 
  alt=&#34;folder.svg&#34;&gt;
 &lt;em&gt;Template Pipelines&lt;/em&gt; / 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/document/Pipeline.svg&#34; 
  title=&#34;Pipeline&#34; 
  alt=&#34;document/pipeline.svg&#34;&gt;
 &lt;em&gt;Indexing&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should now see the following structure:&lt;/p&gt;







  
  
  
  
  







  



&lt;div class=&#34;card rounded shadow-stroom p-2 td-post-card mb-4 mt-4&#34; style=&#34;width: fit-content;&#34;&gt;

  &lt;a title=&#34;images/quick-start-guide/index/012_indexing_pipeline.png&#34; href=&#34;../../images/quick-start-guide/index/012_indexing_pipeline.png&#34;&gt;
    &lt;figure style=&#34;margin-block-end: 0px&#34; &gt;
      
      &lt;img class=&#34;card-img-top&#34; src=&#34;../../images/quick-start-guide/index/012_indexing_pipeline.png&#34; style=&#34;max-width: fit-content&#34; alt=&#34;images/quick-start-guide/index/012_indexing_pipeline.png&#34;&gt;
      

      
      &lt;div class=&#34;card-body px-0 pt-2 pb-0&#34;&gt;
        &lt;hr style=&#34;border-top: 1px solid #ddd; margin-top: 0px; margin-bottom:4px;&#34;&gt;
        &lt;figcaption class=&#34;card-text&#34; style=&#34;font-size: smaller; text-align: center;&#34;&gt;Indexing pipeline&lt;/figcaption&gt;
      &lt;/div&gt;
      
    &lt;/figure&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Inheriting from another pipeline often means the structure is there but some properties may not have been set, e.g. &lt;code&gt;xslt&lt;/code&gt; in the &lt;em&gt;xsltFilter&lt;/em&gt;.
If a property has been set in the partent pipeline then you can either use the inherited value or override it.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;../../docs/user-guide/pipelines/element-reference/&#34;&gt;Pipeline Element Reference&lt;/a&gt; for details of what each element does.&lt;/p&gt;
&lt;p&gt;Now we need to set the &lt;code&gt;xslt&lt;/code&gt; property on the &lt;em&gt;xsltFilter&lt;/em&gt; to point at the XSLT document we created earlier and set the &lt;code&gt;index&lt;/code&gt; property on the &lt;em&gt;indexFilter&lt;/em&gt; to point to the index we created.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Assign the XSLT document
&lt;ol&gt;
&lt;li&gt;Click on the 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/pipeline/xslt.svg&#34; 
  title=&#34;title&#34; 
  alt=&#34;pipeline/xslt.svg&#34;&gt;
 &lt;em&gt;xsltFilter&lt;/em&gt; element.&lt;/li&gt;
&lt;li&gt;In the middle Properties pane double-click on the &lt;code&gt;xslt&lt;/code&gt; row.&lt;/li&gt;
&lt;li&gt;Click the &lt;code&gt;...&lt;/code&gt; in the &lt;em&gt;Value&lt;/em&gt; document picker&lt;/li&gt;
&lt;li&gt;Select:&lt;br&gt;











&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/folder.svg&#34; 
  title=&#34;Folder&#34; 
  alt=&#34;folder.svg&#34;&gt;
 &lt;em&gt;Stroom 101&lt;/em&gt; / 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/document/XSLT.svg&#34; 
  title=&#34;Xslt&#34; 
  alt=&#34;document/Xslt.svg&#34;&gt;
 &lt;em&gt;Stroom 101&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;OK&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Assign the Index document
&lt;ol&gt;
&lt;li&gt;Click on the 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/pipeline/index.svg&#34; 
  title=&#34;title&#34; 
  alt=&#34;pipeline/index.svg&#34;&gt;
 &lt;em&gt;indexingFilter&lt;/em&gt; element.&lt;/li&gt;
&lt;li&gt;In the middle Properties pane double-click on the &lt;code&gt;index&lt;/code&gt; row.&lt;/li&gt;
&lt;li&gt;Click the &lt;code&gt;...&lt;/code&gt; in the &lt;em&gt;Value&lt;/em&gt; document picker&lt;/li&gt;
&lt;li&gt;Select:&lt;br&gt;











&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/folder.svg&#34; 
  title=&#34;Folder&#34; 
  alt=&#34;folder.svg&#34;&gt;
 &lt;em&gt;Stroom 101&lt;/em&gt; / 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/document/Index.svg&#34; 
  title=&#34;Index&#34; 
  alt=&#34;document/Index.svg&#34;&gt;
 &lt;em&gt;Stroom 101&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;OK&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once that&amp;rsquo;s done you can save your new pipeline by clicking the 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/save.svg&#34; 
  title=&#34;Save&#34; 
  alt=&#34;save.svg&#34;&gt;
 button.&lt;/p&gt;
&lt;h2 id=&#34;develop-index-translation&#34;&gt;Develop index translation&lt;/h2&gt;
&lt;p&gt;Next we need to create an XSLT that the &lt;code&gt;indexingFilter&lt;/code&gt; understands.
The best place to develop a translation is in the 



&lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#stepper&#34; title=&#34;Glossary entry for Stepper&#34;&gt;
    &lt;span&gt;Stepper&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;
 as it allows you to simulate running the data through the pipeline without producing any persistent output.&lt;/p&gt;
&lt;p&gt;Open the 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/feed.svg&#34; 
  title=&#34;Feed&#34; 
  alt=&#34;feed.svg&#34;&gt;
 &lt;em&gt;CSV_FEED&lt;/em&gt; 



&lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#feed&#34; title=&#34;Glossary entry for Feed&#34;&gt;
    &lt;span&gt;Feed&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;
 we created earlier in the quick-start guide.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the top pane of the Data Browser select the &lt;em&gt;Events&lt;/em&gt; 



&lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#events&#34; title=&#34;Glossary entry for Events&#34;&gt;
    &lt;span&gt;Events&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;
 stream.&lt;/li&gt;
&lt;li&gt;In the bottom pane you will see the XML data the you processed earlier.&lt;/li&gt;
&lt;li&gt;Click the 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/stepping.svg&#34; 
  title=&#34;Stepping&#34; 
  alt=&#34;stepping.svg&#34;&gt;
 button to open the Stepper.&lt;/li&gt;
&lt;li&gt;In the &lt;em&gt;Choose Pipeline To Step With&lt;/em&gt; dialog select our index pipeline:&lt;br&gt;











&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/folder.svg&#34; 
  title=&#34;Folder&#34; 
  alt=&#34;folder.svg&#34;&gt;
 &lt;em&gt;Stroom 101&lt;/em&gt; / 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/document/Pipeline.svg&#34; 
  title=&#34;Pipeline&#34; 
  alt=&#34;document/pipeline.svg&#34;&gt;
 &lt;em&gt;Stroom 101&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will open a Stepper tab showing only the elements of the selected pipeline that can be stepped.
The data pane of the &lt;em&gt;Source&lt;/em&gt; element will show the first event in the stream.&lt;/p&gt;
&lt;p&gt;To add XSLT content click the 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/pipeline/xslt.svg&#34; 
  title=&#34;Xslt&#34; 
  alt=&#34;pipeline/xslt.svg&#34;&gt;
 &lt;em&gt;xsltFilter&lt;/em&gt; element.
This will show the three pane view with editable content (empty) in the top pane and input and output in the bottom two panes.&lt;/p&gt;
&lt;p&gt;The input and output panes will be identical as there is no XSLT content to transform the input.&lt;/p&gt;
&lt;div class=&#34;td-card-deck card-deck mb-4&#34;&gt;
  &lt;div class=&#34;td-card card mb-4&#34;&gt;
  
    &lt;div class=&#34;card-header&#34;&gt;
      
        Input
      
    &lt;/div&gt;
  
  &lt;div class=&#34;card-body&#34;&gt;
    
    
    
      &lt;p class=&#34;card-text&#34;&gt;
        
          &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.1&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;Events xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt;
  &amp;lt;Event StreamId=&amp;quot;25884&amp;quot; EventId=&amp;quot;1&amp;quot;&amp;gt;
    &amp;lt;Id&amp;gt;1&amp;lt;/Id&amp;gt;
    &amp;lt;Guid&amp;gt;10990cde-1084-4006-aaf3-7fe52b62ce06&amp;lt;/Guid&amp;gt;
    &amp;lt;FromIp&amp;gt;159.161.108.105&amp;lt;/FromIp&amp;gt;
    &amp;lt;ToIp&amp;gt;217.151.32.69&amp;lt;/ToIp&amp;gt;
    &amp;lt;Application&amp;gt;Tres-Zap&amp;lt;/Application&amp;gt;
  &amp;lt;/Event&amp;gt;
&amp;lt;/Events&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

        
      &lt;/p&gt;
    
  &lt;/div&gt;
  
&lt;/div&gt;

  &lt;div class=&#34;td-card card mb-4&#34;&gt;
  
    &lt;div class=&#34;card-header&#34;&gt;
      
        Output
      
    &lt;/div&gt;
  
  &lt;div class=&#34;card-body&#34;&gt;
    
    
    
      &lt;p class=&#34;card-text&#34;&gt;
        
          &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.1&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;Events xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt;
  &amp;lt;Event StreamId=&amp;quot;25884&amp;quot; EventId=&amp;quot;1&amp;quot;&amp;gt;
    &amp;lt;Id&amp;gt;1&amp;lt;/Id&amp;gt;
    &amp;lt;Guid&amp;gt;10990cde-1084-4006-aaf3-7fe52b62ce06&amp;lt;/Guid&amp;gt;
    &amp;lt;FromIp&amp;gt;159.161.108.105&amp;lt;/FromIp&amp;gt;
    &amp;lt;ToIp&amp;gt;217.151.32.69&amp;lt;/ToIp&amp;gt;
    &amp;lt;Application&amp;gt;Tres-Zap&amp;lt;/Application&amp;gt;
  &amp;lt;/Event&amp;gt;
&amp;lt;/Events&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

        
      &lt;/p&gt;
    
  &lt;/div&gt;
  
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;Paste the following content into the top pane.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;xsl:stylesheet
    xmlns=&amp;quot;records:2&amp;quot;
    xmlns:xsl=&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
    version=&amp;quot;2.0&amp;quot;&amp;gt;
  
  &amp;lt;!-- Match on the top level Events element --&amp;gt;
  &amp;lt;xsl:template match=&amp;quot;/Events&amp;quot;&amp;gt;
    &amp;lt;!-- Create the wrapper element for all the events/records --&amp;gt;
    &amp;lt;records
        xsi:schemaLocation=&amp;quot;records:2 file://records-v2.0.xsd&amp;quot;
        version=&amp;quot;2.0&amp;quot;&amp;gt;
      &amp;lt;!-- Apply any templates to this element or its children --&amp;gt;
      &amp;lt;xsl:apply-templates /&amp;gt;
    &amp;lt;/records&amp;gt;
  &amp;lt;/xsl:template&amp;gt;
  
  &amp;lt;!-- Match on any Event element at this level --&amp;gt;
  &amp;lt;xsl:template match=&amp;quot;Event&amp;quot;&amp;gt;
    &amp;lt;!-- Create a record element and populate its data items --&amp;gt;
    &amp;lt;record&amp;gt;
      &amp;lt;data name=&amp;quot;StreamId&amp;quot;&amp;gt;
        &amp;lt;!-- Added to the event by the IdEnrichmentFiler --&amp;gt;
        &amp;lt;xsl:attribute name=&amp;quot;value&amp;quot; select=&amp;quot;@StreamId&amp;quot; /&amp;gt;
      &amp;lt;/data&amp;gt;
      &amp;lt;data name=&amp;quot;EventId&amp;quot;&amp;gt;
        &amp;lt;!-- Added to the event by the IdEnrichmentFiler --&amp;gt;
        &amp;lt;xsl:attribute name=&amp;quot;value&amp;quot; select=&amp;quot;@EventId&amp;quot; /&amp;gt;
      &amp;lt;/data&amp;gt;
      &amp;lt;data name=&amp;quot;Id&amp;quot;&amp;gt;
        &amp;lt;xsl:attribute name=&amp;quot;value&amp;quot; select=&amp;quot;./Id&amp;quot; /&amp;gt;
      &amp;lt;/data&amp;gt;
      &amp;lt;data name=&amp;quot;Guid&amp;quot;&amp;gt;
        &amp;lt;xsl:attribute name=&amp;quot;value&amp;quot; select=&amp;quot;./Guid&amp;quot; /&amp;gt;
      &amp;lt;/data&amp;gt;
      &amp;lt;data name=&amp;quot;FromIp&amp;quot;&amp;gt;
        &amp;lt;xsl:attribute name=&amp;quot;value&amp;quot; select=&amp;quot;./FromIp&amp;quot; /&amp;gt;
      &amp;lt;/data&amp;gt;
      &amp;lt;data name=&amp;quot;ToIp&amp;quot;&amp;gt;
        &amp;lt;xsl:attribute name=&amp;quot;value&amp;quot; select=&amp;quot;./ToIp&amp;quot; /&amp;gt;
      &amp;lt;/data&amp;gt;
      &amp;lt;data name=&amp;quot;Application&amp;quot;&amp;gt;
        &amp;lt;xsl:attribute name=&amp;quot;value&amp;quot; select=&amp;quot;./Application&amp;quot; /&amp;gt;
      &amp;lt;/data&amp;gt;
    &amp;lt;/record&amp;gt;
  &amp;lt;/xsl:template&amp;gt;
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The XSLT is converting &lt;code&gt;Events/Event&lt;/code&gt; elements into &lt;code&gt;Records/Record&lt;/code&gt; elements conforming to the &lt;code&gt;records:2&lt;/code&gt; XML Schema, which is the expected input format for the 



&lt;span&gt;&lt;a href=&#34;../../docs/user-guide/pipelines/element-reference/#indexingfilter&#34; title=&#34;Pipeline element reference entry for IndexingFilter&#34; style=&#34;&#34;&gt;IndexingFilter&lt;/a&gt;&lt;/span&gt;
.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;IndexingFilter&lt;/em&gt; expects a set of &lt;code&gt;Record&lt;/code&gt; elements wrapped in a &lt;code&gt;Records&lt;/code&gt; element.
Each &lt;code&gt;Record&lt;/code&gt; element needs to contain one &lt;code&gt;Data&lt;/code&gt; element for each Field in the Index.
Each &lt;code&gt;Data&lt;/code&gt; element needs a &lt;code&gt;Name&lt;/code&gt; attribute (the Index Field name) and a &lt;code&gt;Value&lt;/code&gt; attribute (the value from the event to index).&lt;/p&gt;
&lt;p&gt;Now click the 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/refresh-green.svg&#34; 
  title=&#34;Refresh&#34; 
  alt=&#34;refresh-green.svg&#34;&gt;
 refresh button to refresh the step with the new XSLT content.&lt;/p&gt;
&lt;p&gt;The Output should have changed so that the Input and Output now look like this:&lt;/p&gt;
&lt;div class=&#34;td-card-deck card-deck mb-4&#34;&gt;
  &lt;div class=&#34;td-card card mb-4&#34;&gt;
  
    &lt;div class=&#34;card-header&#34;&gt;
      
        Input
      
    &lt;/div&gt;
  
  &lt;div class=&#34;card-body&#34;&gt;
    
    
    
      &lt;p class=&#34;card-text&#34;&gt;
        
          &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.1&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;Events xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&amp;gt;
  &amp;lt;Event StreamId=&amp;quot;25884&amp;quot; EventId=&amp;quot;1&amp;quot;&amp;gt;
    &amp;lt;Id&amp;gt;1&amp;lt;/Id&amp;gt;
    &amp;lt;Guid&amp;gt;10990cde-1084-4006-aaf3-7fe52b62ce06&amp;lt;/Guid&amp;gt;
    &amp;lt;FromIp&amp;gt;159.161.108.105&amp;lt;/FromIp&amp;gt;
    &amp;lt;ToIp&amp;gt;217.151.32.69&amp;lt;/ToIp&amp;gt;
    &amp;lt;Application&amp;gt;Tres-Zap&amp;lt;/Application&amp;gt;
  &amp;lt;/Event&amp;gt;
&amp;lt;/Events&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

        
      &lt;/p&gt;
    
  &lt;/div&gt;
  
&lt;/div&gt;

  &lt;div class=&#34;td-card card mb-4&#34;&gt;
  
    &lt;div class=&#34;card-header&#34;&gt;
      
        Output
      
    &lt;/div&gt;
  
  &lt;div class=&#34;card-body&#34;&gt;
    
    
    
      &lt;p class=&#34;card-text&#34;&gt;
        
          &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.1&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;records
    xmlns=&amp;quot;records:2&amp;quot;
    xmlns:stroom=&amp;quot;stroom&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
    xsi:schemaLocation=&amp;quot;records:2 file://records-v2.0.xsd&amp;quot;
    version=&amp;quot;2.0&amp;quot;&amp;gt;
  &amp;lt;record&amp;gt;
    &amp;lt;data name=&amp;quot;StreamId&amp;quot; value=&amp;quot;25884&amp;quot; /&amp;gt;
    &amp;lt;data name=&amp;quot;EventId&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;
    &amp;lt;data name=&amp;quot;Id&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;
    &amp;lt;data name=&amp;quot;Guid&amp;quot; value=&amp;quot;10990cde-1084-4006-aaf3-7fe52b62ce06&amp;quot; /&amp;gt;
    &amp;lt;data name=&amp;quot;FromIp&amp;quot; value=&amp;quot;159.161.108.105&amp;quot; /&amp;gt;
    &amp;lt;data name=&amp;quot;ToIp&amp;quot; value=&amp;quot;217.151.32.69&amp;quot; /&amp;gt;
    &amp;lt;data name=&amp;quot;Application&amp;quot; value=&amp;quot;Tres-Zap&amp;quot; /&amp;gt;
  &amp;lt;/record&amp;gt;
&amp;lt;/records&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

        
      &lt;/p&gt;
    
  &lt;/div&gt;
  
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;You can use the stepping controls (










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/fast-backward-green.svg&#34; 
  title=&#34;Fast Backward&#34; 
  alt=&#34;fast-backward-green.svg&#34;&gt;











&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/step-backward-green.svg&#34; 
  title=&#34;Step Backward&#34; 
  alt=&#34;step-backward-green.svg&#34;&gt;











&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/step-forward-green.svg&#34; 
  title=&#34;Step Forward&#34; 
  alt=&#34;step-forward-green.svg&#34;&gt;











&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/fast-forward-green.svg&#34; 
  title=&#34;Fast Forward&#34; 
  alt=&#34;fast-forward-green.svg&#34;&gt;
) to check that the ouput is correct for other input events.&lt;/p&gt;
&lt;p&gt;Once you are happy with your translation click the 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/save.svg&#34; 
  title=&#34;Save&#34; 
  alt=&#34;save.svg&#34;&gt;
 button to save the XSLT content to the &lt;em&gt;Stroom 101&lt;/em&gt; XSLT document.&lt;/p&gt;
&lt;h2 id=&#34;processing-the-indexing-pipeline&#34;&gt;Processing the indexing pipeline&lt;/h2&gt;
&lt;p&gt;To get our indexing pipeline processing data we need to create a 



&lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#processor-filter&#34; title=&#34;Glossary entry for Processor Filter&#34;&gt;
    &lt;span&gt;Processor Filter&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;
 to select the data to process through the pipeline.&lt;/p&gt;
&lt;p&gt;Go back to your 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/document/Pipeline.svg&#34; 
  title=&#34;Pipeline&#34; 
  alt=&#34;document/pipeline.svg&#34;&gt;
 &lt;em&gt;Stroom 101&lt;/em&gt; pipeline and go to the Processors sub-tab.&lt;/p&gt;
&lt;p&gt;Click the add button 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/add.svg&#34; 
  title=&#34;Add&#34; 
  alt=&#34;add.svg&#34;&gt;
 and you will be presented with a Filter 



&lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#expression-tree&#34; title=&#34;Glossary entry for Expression Tree&#34;&gt;
    &lt;span&gt;Expression Tree&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;
 in the &lt;em&gt;Add Filter&lt;/em&gt; dialog.
To configure the filter do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Right click on the root AND operator and click 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/add.svg&#34; 
  title=&#34;Add Term&#34; 
  alt=&#34;add.svg&#34;&gt;
 Add Term.
A new expression is added to the tree as a child of the operator and it has three dropdowns in it (



&lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#field&#34; title=&#34;Glossary entry for Field&#34;&gt;
    &lt;span&gt;Field&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;
, 



&lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#condition&#34; title=&#34;Glossary entry for Condition&#34;&gt;
    &lt;span&gt;Condition&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;
 and value).&lt;/li&gt;
&lt;li&gt;To create an expression term for the Feed:
&lt;ol&gt;
&lt;li&gt;Field: &lt;code&gt;Feed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Condition: &lt;code&gt;is&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Value: &lt;code&gt;CSV_FEED&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;To create an expression term for the Stream Type:
&lt;ol&gt;
&lt;li&gt;Field: &lt;code&gt;Type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Condition: &lt;code&gt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Value: &lt;code&gt;Events&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This filter will process all Streams of type &lt;code&gt;Events&lt;/code&gt; in the Feed &lt;code&gt;CSV_FEED&lt;/code&gt;.
Enable processing for the 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/document/Pipeline.svg&#34; 
  title=&#34;Pipeline&#34; 
  alt=&#34;document/pipeline.svg&#34;&gt;
 Pipeline and the 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/filter.svg&#34; 
  title=&#34;Processor Filter&#34; 
  alt=&#34;filter.svg&#34;&gt;
 Processor Filter by clicking the checkboxes in the &lt;em&gt;Enabled&lt;/em&gt; column.&lt;/p&gt;
&lt;p&gt;Stroom should then index the data, assuming everything is correct.&lt;/p&gt;
&lt;p&gt;If there are errors you&amp;rsquo;ll see error streams produced in the data browsing page of the &lt;em&gt;CSV_FEED&lt;/em&gt; Feed or the &lt;em&gt;Stroom 101&lt;/em&gt; Pipeline.
If no errors have occurred, there will be no rows in the data browser page as the IndexFilter does not output any Streams.&lt;/p&gt;
&lt;p&gt;To verify the data has been written to the Index:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/document/Index.svg&#34; 
  title=&#34;Index&#34; 
  alt=&#34;document/Index.svg&#34;&gt;
 &lt;em&gt;Stroom 101&lt;/em&gt; Index.&lt;/li&gt;
&lt;li&gt;Select the &lt;em&gt;Shards&lt;/em&gt; sub-tab.&lt;/li&gt;
&lt;li&gt;Click 










&lt;img 
  class=&#34;stroom-icon &#34; 
  src=&#34;../../images/stroom-ui/refresh.svg&#34; 
  title=&#34;Refresh&#34; 
  alt=&#34;refresh.svg&#34;&gt;
 refresh.
You many need to wait a bit for the data to be flushed to the index shards.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should eventually see a &lt;em&gt;Doc Count&lt;/em&gt; of 2,000 to match the number of events processed in the source Stream.&lt;/p&gt;
&lt;p&gt;Now that we have finished indexing we can display data on a &lt;a href=&#34;../../docs/quick-start-guide/dashboard/&#34;&gt;dashboard&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: XSLT Functions</title>
      <link>/docs/user-guide/pipelines/xslt/xslt-functions/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-guide/pipelines/xslt/xslt-functions/</guid>
      <description>
        
        
        &lt;!-- 
TODO
This file needs splitting up with one file per function.
These files can be generated from annotations in the Java code (see https://github.com/gchq/stroom/issues/2932)
--&gt;
&lt;p&gt;By including the following namespace:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;xmlns:s=&amp;quot;stroom&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E.g.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;xsl:stylesheet
    xmlns=&amp;quot;event-logging:3&amp;quot;
    xmlns:s=&amp;quot;stroom&amp;quot;
    xmlns:xsl=&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
    version=&amp;quot;2.0&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following functions are available to aid your translation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#bitmap-lookup&#34;&gt;&lt;code&gt;bitmap-lookup(String map, String key)&lt;/code&gt;&lt;/a&gt; - Bitmap based look up against reference data map using the period start time&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bitmap-lookup&#34;&gt;&lt;code&gt;bitmap-lookup(String map, String key, String time)&lt;/code&gt;&lt;/a&gt; - Bitmap based look up against reference data map using a specified time, e.g. the event time&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bitmap-lookup&#34;&gt;&lt;code&gt;bitmap-lookup(String map, String key, String time, Boolean ignoreWarnings)&lt;/code&gt;&lt;/a&gt; - Bitmap based look up against reference data map using a specified time, e.g. the event time, and ignore any warnings generated by a failed lookup&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bitmap-lookup&#34;&gt;&lt;code&gt;bitmap-lookup(String map, String key, String time, Boolean ignoreWarnings, Boolean trace)&lt;/code&gt;&lt;/a&gt; - Bitmap based look up against reference data map using a specified time, e.g. the event time, and ignore any warnings generated by a failed lookup and get trace information for the path taken to resolve the lookup.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;classification()&lt;/code&gt; - The classification of the feed for the data being processed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;col-from()&lt;/code&gt; - The column in the input that the current record begins on (can be 0).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;col-to()&lt;/code&gt; - The column in the input that the current record ends at.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;current-time()&lt;/code&gt; - The current system time&lt;/li&gt;
&lt;li&gt;&lt;code&gt;current-user()&lt;/code&gt; - The current user logged into Stroom (only relevant for interactive use, e.g. search)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;decode-url(String encodedUrl)&lt;/code&gt; - Decode the provided url.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dictionary&#34;&gt;&lt;code&gt;dictionary(String name)&lt;/code&gt;&lt;/a&gt; - Loads the contents of the named dictionary for use within the translation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;encode-url(String url)&lt;/code&gt; - Encode the provided url.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;feed-attribute(String attributeKey)&lt;/code&gt; - &lt;strong&gt;NOTE:&lt;/strong&gt; This function is deprecated, use &lt;code&gt;meta(String key)&lt;/code&gt; instead.
The value for the supplied feed &lt;code&gt;attributeKey&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;feed-name()&lt;/code&gt; - Name of the feed for the data being processed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch-json(String url)&lt;/code&gt; - Simplistic version of &lt;code&gt;http-call&lt;/code&gt; that sends a request to the passed &lt;code&gt;url&lt;/code&gt; and converts the JSON response body to XML using &lt;code&gt;json-to-xml&lt;/code&gt;.
Currently does not support SSL configuration like &lt;code&gt;http-call&lt;/code&gt; does.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#format-date&#34;&gt;&lt;code&gt;format-date(String date, String pattern)&lt;/code&gt;&lt;/a&gt; - Format a date that uses the specified pattern using the default time zone&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#format-date&#34;&gt;&lt;code&gt;format-date(String date, String pattern, String timeZone)&lt;/code&gt;&lt;/a&gt; - Format a date that uses the specified pattern with the specified time zone&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#format-date&#34;&gt;&lt;code&gt;format-date(String date, String patternIn, String timeZoneIn, String patternOut, String timeZoneOut)&lt;/code&gt;&lt;/a&gt; - Parse a date with the specified input pattern and time zone and format the output with the specified output pattern and time zone&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#format-date&#34;&gt;&lt;code&gt;format-date(String milliseconds)&lt;/code&gt;&lt;/a&gt; - Format a date that is specified as a number of milliseconds since a standard base time known as &amp;ldquo;the epoch&amp;rdquo;, namely January 1, 1970, 00:00:00 GMT&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#put-and-get&#34;&gt;&lt;code&gt;get(String key)&lt;/code&gt;&lt;/a&gt; - Returns the value associated with a &lt;code&gt;key&lt;/code&gt; that has been stored in a map using the &lt;a href=&#34;#put-and-get&#34;&gt;&lt;code&gt;put()&lt;/code&gt;&lt;/a&gt; function.
The map is in the scope of the current pipeline process so values do not live after the stream has been processed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash(String value)&lt;/code&gt; - Hash a string value using the default &lt;code&gt;SHA-256&lt;/code&gt; algorithm and no salt&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash(String value, String algorithm, String salt)&lt;/code&gt; - Hash a string value using the specified hashing algorithm and supplied salt value.
Supported hashing algorithms include &lt;code&gt;SHA-256&lt;/code&gt;, &lt;code&gt;SHA-512&lt;/code&gt;, &lt;code&gt;MD5&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hex-to-dec(String hex)&lt;/code&gt; - Convert hex to dec representation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hex-to-oct(String hex)&lt;/code&gt; - Convert hex to oct representation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host-address(String hostname)&lt;/code&gt; - Convert a hostname into an IP address.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host-name(String ipAddress)&lt;/code&gt; - Convert an IP address into a hostname.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#http-call&#34;&gt;&lt;code&gt;http-call(String url, String headers, String mediaType, String data, String clientConfig)&lt;/code&gt;&lt;/a&gt; - Makes an HTTP(S) request to a remote server.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json-to-xml(String json)&lt;/code&gt; - Returns an XML representation of the supplied JSON value for use in XPath expressions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;line-from()&lt;/code&gt; - The line in the input that the current record begins on (1 based).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;line-to()&lt;/code&gt; - The line in the input that the current record ends at.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#link&#34;&gt;&lt;code&gt;link(String url)&lt;/code&gt;&lt;/a&gt; - Creates a stroom dashboard table link.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#link&#34;&gt;&lt;code&gt;link(String title, String url)&lt;/code&gt;&lt;/a&gt; - Creates a stroom dashboard table link.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#link&#34;&gt;&lt;code&gt;link(String title, String url, String type)&lt;/code&gt;&lt;/a&gt; - Creates a stroom dashboard table link.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#log&#34;&gt;&lt;code&gt;log(String severity, String message)&lt;/code&gt;&lt;/a&gt; - Logs a message to the processing log with the specified severity&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lookup&#34;&gt;&lt;code&gt;lookup(String map, String key)&lt;/code&gt;&lt;/a&gt; - Look up a reference data map using the period start time&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lookup&#34;&gt;&lt;code&gt;lookup(String map, String key, String time)&lt;/code&gt;&lt;/a&gt; - Look up a reference data map using a specified time, e.g. the event time&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lookup&#34;&gt;&lt;code&gt;lookup(String map, String key, String time, Boolean ignoreWarnings)&lt;/code&gt;&lt;/a&gt; - Look up a reference data map using a specified time, e.g. the event time, and ignore any warnings generated by a failed lookup&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lookup&#34;&gt;&lt;code&gt;lookup(String map, String key, String time, Boolean ignoreWarnings, Boolean trace)&lt;/code&gt;&lt;/a&gt; - Look up a reference data map using a specified time, e.g. the event time, ignore any warnings generated by a failed lookup and get trace information for the path taken to resolve the lookup.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;meta(String key)&lt;/code&gt; - Lookup a meta data value for the current stream using the specified key.
The key can be &lt;code&gt;Feed&lt;/code&gt;, &lt;code&gt;StreamType&lt;/code&gt;, &lt;code&gt;CreatedTime&lt;/code&gt;, &lt;code&gt;EffectiveTime&lt;/code&gt;, &lt;code&gt;Pipeline&lt;/code&gt; or any other attribute supplied when the stream was sent to Stroom, e.g. meta(&amp;lsquo;System&amp;rsquo;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numeric-ip(String ipAddress)&lt;/code&gt; - Convert an IP address to a numeric representation for range comparison&lt;/li&gt;
&lt;li&gt;&lt;code&gt;part-no()&lt;/code&gt; - The current part within a multi part aggregated input stream (AKA the substream number) (1 based)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parse-uri&#34;&gt;&lt;code&gt;parse-uri(String URI)&lt;/code&gt;&lt;/a&gt; - Returns an XML structure of the URI providing &lt;code&gt;authority&lt;/code&gt;, &lt;code&gt;fragment&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt;, &lt;code&gt;scheme&lt;/code&gt;, &lt;code&gt;schemeSpecificPart&lt;/code&gt;, and &lt;code&gt;userInfo&lt;/code&gt; components if present.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipeline-name()&lt;/code&gt; - Get the name of the pipeline currently processing the stream.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pointIsInsideXYPolygon&#34;&gt;&lt;code&gt;pointIsInsideXYPolygon(Number xPos, Number yPos, Number[] xPolyData, Number[] yPolyData)&lt;/code&gt;&lt;/a&gt; - Get the name of the pipeline currently processing the stream.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;random()&lt;/code&gt; - Get a system generated random number between 0 and 1.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;record-no()&lt;/code&gt; - The current record number within the current part (substream) (1 based).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;search-id()&lt;/code&gt; - Get the id of the batch search when a pipeline is processing as part of a batch search&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source()&lt;/code&gt; - Returns an XML structure with the &lt;code&gt;stroom-meta&lt;/code&gt; namespace detailing the current source location.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source-id()&lt;/code&gt; - Get the id of the current input stream that is being processed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stream-id()&lt;/code&gt; - An alias for &lt;code&gt;source-id&lt;/code&gt; included for backward compatibility.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipeline-name()&lt;/code&gt; - Name of the current processing pipeline using the XSLT&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#put-and-get&#34;&gt;&lt;code&gt;put(String key, String value)&lt;/code&gt;&lt;/a&gt; - Store a value for use later on in the translation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bitmap-lookup&#34;&gt;bitmap-lookup()&lt;/h2&gt;
&lt;p&gt;The bitmap-lookup() function looks up a bitmap key from reference or context data a value (which can be an XML node set) for each set bit position and adds it to the resultant XML.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;bitmap-lookup(String map, String key)
bitmap-lookup(String map, String key, String time)
bitmap-lookup(String map, String key, String time, Boolean ignoreWarnings)
bitmap-lookup(String map, String key, String time, Boolean ignoreWarnings, Boolean trace)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt; - The name of the reference data map to perform the lookup against.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt; - The bitmap value to lookup.
This can either be represented as a decimal integer (e.g. &lt;code&gt;14&lt;/code&gt;) or as hexadecimal by prefixing with &lt;code&gt;0x&lt;/code&gt; (e.g &lt;code&gt;0xE&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time&lt;/code&gt; - Determines which set of reference data was effective at the requested time.
If no reference data exists with an effective time before the requested time then the lookup will fail.
Time is in the format &lt;code&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXX&lt;/code&gt;, e.g. &lt;code&gt;2010-01-01T00:00:00.000Z&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ignoreWarnings&lt;/code&gt; - If true, any lookup failures will be ignored, else they will be reported as warnings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trace&lt;/code&gt; - If true, additional trace information is output as INFO messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the look up fails no result will be returned.&lt;/p&gt;
&lt;p&gt;The key is a bitmap expressed as either a decimal integer or a hexidecimal value, e.g. &lt;code&gt;14&lt;/code&gt;/&lt;code&gt;0xE&lt;/code&gt; is &lt;code&gt;1110&lt;/code&gt; as a binary bitmap.
For each bit position that is set, (i.e. has a binary value of &lt;code&gt;1&lt;/code&gt;)  a lookup will be performed using that bit position as the key.
In this example, positions &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; &amp;amp; &lt;code&gt;3&lt;/code&gt; are set so a lookup would be performed for these bit positions.
The result of each lookup for the bitmap are concatenated together in bit position order, separated by a space.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;ignoreWarnings&lt;/code&gt; is true then any lookup failures will be ignored and it will return the value(s) for the bit positions it was able to lookup.&lt;/p&gt;
&lt;p&gt;This function can be useful when you have a set of values that can be represented as a bitmap and you need them to be converted back to individual values.
For example if you have a set of additive account permissions (e.g Admin, ManageUsers, PerformExport, etc.), each of which is associated with a bit position, then a user&amp;rsquo;s permissions could be defined as a single decimal/hex bitmap value.
Thus a bitmap lookup with this value would return all the permissions held by the user.&lt;/p&gt;
&lt;p&gt;For example the reference data store may contain:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key (Bit position)&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Administrator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Manage_Users&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Perform_Export&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;View_Data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Manage_Jobs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Delete_Data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Manage_Volumes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following are example lookups using the above reference data:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lookup Key (decimal)&lt;/th&gt;
&lt;th&gt;Lookup Key (Hex)&lt;/th&gt;
&lt;th&gt;Bitmap&lt;/th&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0x0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0000000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0x1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0000001&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Administrator&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;74&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0x4A&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1001010&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Manage_Users View_Data Manage_Volumes&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0x2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0000010&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Manage_Users&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;96&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0x60&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1100000&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Delete_Data Manage_Volumes&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;dictionary&#34;&gt;dictionary()&lt;/h2&gt;
&lt;p&gt;The dictionary() function gets the contents of the specified dictionary for use during translation.
The main use for this function is to allow users to abstract the management of a set of keywords from the XSLT so that it is easier for some users to make quick alterations to a dictionary that is used by some XSLT, without the need for the user to understand the complexities of XSLT.&lt;/p&gt;
&lt;h2 id=&#34;format-date&#34;&gt;format-date()&lt;/h2&gt;
&lt;p&gt;The format-date() function takes a Pattern and optional TimeZone arguments and replaces the parsed
contents with an XML standard Date Format. The pattern must be a Java based SimpleDateFormat.  If the
optional TimeZone argument is present the pattern must not include the time zone pattern tokens (z and Z).
A special time zone value of &amp;ldquo;GMT/BST&amp;rdquo; can be used to guess the time based on the date (BST during
British Summer Time).&lt;/p&gt;
&lt;p&gt;E.g. Convert a GMT date time &amp;ldquo;2009/12/01 12:34:11&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;xsl:value-of select=&amp;quot;s:format-date(&#39;2009/08/01 12:34:11&#39;, &#39;yyyy/MM/dd HH:mm:ss&#39;)&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E.g. Convert a GMT or BST date time &amp;ldquo;2009/08/01 12:34:11&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;xsl:value-of select=&amp;quot;s:format-date(&#39;2009/08/01 12:34:11&#39;, &#39;yyyy/MM/dd HH:mm:ss&#39;, &#39;GMT/BST&#39;)&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E.g. Convert a GMT+1:00 date time &amp;ldquo;2009/08/01 12:34:11&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;xsl:value-of select=&amp;quot;s:format-date(&#39;2009/08/01 12:34:11&#39;, &#39;yyyy/MM/dd HH:mm:ss&#39;, &#39;GMT+1:00&#39;)&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E.g. Convert a date time specified as milliseconds since the epoch &amp;ldquo;1269270011640&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;xsl:value-of select=&amp;quot;s:format-date(&#39;1269270011640&#39;)&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Time Zone Must be as per the rules defined in SimpleDateFormat under General Time Zone syntax.&lt;/p&gt;
&lt;h2 id=&#34;http-call&#34;&gt;http-call()&lt;/h2&gt;
&lt;p&gt;Executes an HTTP(S) request to a remote server and returns the response.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;http-call(String url, [String headers], [String mediaType], [String data], [String clientConfig])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The arguments are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt; - The URL to send the request to.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;headers&lt;/code&gt; - A newline (&lt;code&gt;&amp;amp;#10;&lt;/code&gt;) delimited list of HTTP headers to send.
Each header is of the form &lt;code&gt;key:value&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mediaType&lt;/code&gt; - The media (or MIME) type of the request &lt;code&gt;data&lt;/code&gt;, e.g. &lt;code&gt;application/json&lt;/code&gt;.
If not set &lt;code&gt;application/json; charset=utf-8&lt;/code&gt; will be used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; - The data to send.
The data type should be consistent with &lt;code&gt;mediaType&lt;/code&gt;.
Supplying the &lt;code&gt;data&lt;/code&gt; argument means a POST request method will be used rather than the default GET.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clientConfig&lt;/code&gt; - A JSON object containing the configuration for the HTTP client to use, including any SSL configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The function returns the response as XML with namespace &lt;code&gt;stroom-http&lt;/code&gt;.
The XML includes the body of the response in addition to the status code, success status, message and any headers.&lt;/p&gt;
&lt;h3 id=&#34;clientconfig&#34;&gt;&lt;code&gt;clientConfig&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The client can be configured using a JSON object containing various optional configuration items.
The following is an example of the client configuration object with all keys populated.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;callTimeout&amp;quot;: &amp;quot;PT30S&amp;quot;,
  &amp;quot;connectionTimeout&amp;quot;: &amp;quot;PT30S&amp;quot;,
  &amp;quot;followRedirects&amp;quot;: false,
  &amp;quot;followSslRedirects&amp;quot;: false,
  &amp;quot;httpProtocols&amp;quot;: [
    &amp;quot;http/2&amp;quot;,
    &amp;quot;http/1.1&amp;quot;
  ],
  &amp;quot;readTimeout&amp;quot;: &amp;quot;PT30S&amp;quot;,
  &amp;quot;retryOnConnectionFailure&amp;quot;: true,
  &amp;quot;sslConfig&amp;quot;: {
    &amp;quot;keyStorePassword&amp;quot;: &amp;quot;password&amp;quot;,
    &amp;quot;keyStorePath&amp;quot;: &amp;quot;/some/path/client.jks&amp;quot;,
    &amp;quot;keyStoreType&amp;quot;: &amp;quot;JKS&amp;quot;,
    &amp;quot;trustStorePassword&amp;quot;: &amp;quot;password&amp;quot;,
    &amp;quot;trustStorePath&amp;quot;: &amp;quot;/some/path/ca.jks&amp;quot;,
    &amp;quot;trustStoreType&amp;quot;: &amp;quot;JKS&amp;quot;,
    &amp;quot;sslProtocol&amp;quot;: &amp;quot;TLSv1.2&amp;quot;,
    &amp;quot;hostnameVerificationEnabled&amp;quot;: false
  },
  &amp;quot;writeTimeout&amp;quot;: &amp;quot;PT30S&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are using two-way SSL then you may need to set the protocol to &lt;code&gt;HTTP/1.1&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &amp;quot;httpProtocols&amp;quot;: [
    &amp;quot;http/1.1&amp;quot;
  ],
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;example-output&#34;&gt;Example output&lt;/h3&gt;
&lt;p&gt;The following is an example of the XML returned from the &lt;code&gt;http-call&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;response xmlns=&amp;quot;stroom-http&amp;quot;&amp;gt;
  &amp;lt;successful&amp;gt;true&amp;lt;/successful&amp;gt;
  &amp;lt;code&amp;gt;200&amp;lt;/code&amp;gt;
  &amp;lt;message&amp;gt;OK&amp;lt;/message&amp;gt;
  &amp;lt;headers&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;key&amp;gt;cache-control&amp;lt;/key&amp;gt;
      &amp;lt;value&amp;gt;public, max-age=600&amp;lt;/value&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;key&amp;gt;connection&amp;lt;/key&amp;gt;
      &amp;lt;value&amp;gt;keep-alive&amp;lt;/value&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;key&amp;gt;content-length&amp;lt;/key&amp;gt;
      &amp;lt;value&amp;gt;108&amp;lt;/value&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;key&amp;gt;content-type&amp;lt;/key&amp;gt;
      &amp;lt;value&amp;gt;application/json;charset=iso-8859-1&amp;lt;/value&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;key&amp;gt;date&amp;lt;/key&amp;gt;
      &amp;lt;value&amp;gt;Wed, 29 Jun 2022 13:03:38 GMT&amp;lt;/value&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;key&amp;gt;expires&amp;lt;/key&amp;gt;
      &amp;lt;value&amp;gt;Wed, 29 Jun 2022 13:13:38 GMT&amp;lt;/value&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;key&amp;gt;server&amp;lt;/key&amp;gt;
      &amp;lt;value&amp;gt;nginx/1.21.6&amp;lt;/value&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;key&amp;gt;vary&amp;lt;/key&amp;gt;
      &amp;lt;value&amp;gt;Accept-Encoding&amp;lt;/value&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;key&amp;gt;x-content-type-options&amp;lt;/key&amp;gt;
      &amp;lt;value&amp;gt;nosniff&amp;lt;/value&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;key&amp;gt;x-frame-options&amp;lt;/key&amp;gt;
      &amp;lt;value&amp;gt;sameorigin&amp;lt;/value&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;key&amp;gt;x-xss-protection&amp;lt;/key&amp;gt;
      &amp;lt;value&amp;gt;1; mode=block&amp;lt;/value&amp;gt;
    &amp;lt;/header&amp;gt;
  &amp;lt;/headers&amp;gt;
  &amp;lt;body&amp;gt;{&amp;quot;buildDate&amp;quot;:&amp;quot;2022-06-29T09:22:41.541886118Z&amp;quot;,&amp;quot;buildVersion&amp;quot;:&amp;quot;SNAPSHOT&amp;quot;,&amp;quot;upDate&amp;quot;:&amp;quot;2022-06-29T11:06:26.869Z&amp;quot;}&amp;lt;/body&amp;gt;
&amp;lt;/response&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;example-usage&#34;&gt;Example usage&lt;/h3&gt;
&lt;p&gt;This is an example of how to use the function call in your XSLT.
It is recommended to place the &lt;code&gt;clientConfig&lt;/code&gt; JSON in a 



&lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#dictionary&#34; title=&#34;Glossary entry for Dictionary&#34;&gt;
    &lt;span&gt;Dictionary&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;
 to make it easier to edit and to avoid having to escape all the quotes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  ...
  &amp;lt;xsl:template match=&amp;quot;record&amp;quot;&amp;gt;
    ...
    &amp;lt;!-- Read the client config from a Dictionary into a variable --&amp;gt;
    &amp;lt;xsl:variable name=&amp;quot;clientConfig&amp;quot; select=&amp;quot;stroom:dictionary(&#39;HTTP Client Config&#39;)&amp;quot; /&amp;gt;
    &amp;lt;!-- Make the HTTP call and store the response in a variable --&amp;gt;
    &amp;lt;xsl:variable name=&amp;quot;response&amp;quot; select=&amp;quot;stroom:http-call(&#39;https://reqbin.com/echo&#39;, null, null, null, $clientConfig)&amp;quot; /&amp;gt;
    &amp;lt;!-- Apply &#39;response&#39; templates to the response --&amp;gt;
    &amp;lt;xsl:apply-templates mode=&amp;quot;response&amp;quot; select=&amp;quot;$response&amp;quot; /&amp;gt;
    ...
  &amp;lt;/xsl:template&amp;gt;
  
  &amp;lt;xsl:template mode=&amp;quot;response&amp;quot; match=&amp;quot;http:response&amp;quot;&amp;gt;
    &amp;lt;!-- Extract just the body of the response --&amp;gt;
    &amp;lt;val&amp;gt;&amp;lt;xsl:value-of select=&amp;quot;./http:body/text()&amp;quot; /&amp;gt;&amp;lt;/val&amp;gt;
  &amp;lt;/xsl:template&amp;gt;
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;link&#34;&gt;link()&lt;/h2&gt;
&lt;p&gt;Create a string that represents a hyperlink for display in a dashboard table.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;link(url)
link(title, url)
link(title, url, type)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;link(&#39;http://www.somehost.com/somepath&#39;)
&amp;gt; [http://www.somehost.com/somepath](http://www.somehost.com/somepath)
link(&#39;Click Here&#39;,&#39;http://www.somehost.com/somepath&#39;)
&amp;gt; [Click Here](http://www.somehost.com/somepath)
link(&#39;Click Here&#39;,&#39;http://www.somehost.com/somepath&#39;, &#39;dialog&#39;)
&amp;gt; [Click Here](http://www.somehost.com/somepath){dialog}
link(&#39;Click Here&#39;,&#39;http://www.somehost.com/somepath&#39;, &#39;dialog|Dialog Title&#39;)
&amp;gt; [Click Here](http://www.somehost.com/somepath){dialog|Dialog Title}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Type can be one of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dialog&lt;/code&gt; : Display the content of the link URL within a stroom popup dialog.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tab&lt;/code&gt; : Display the content of the link URL within a stroom tab.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;browser&lt;/code&gt; : Display the content of the link URL within a new browser tab.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dashboard&lt;/code&gt; : Used to launch a stroom dashboard internally with parameters in the URL.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you wish to override the default title or URL of the target link in either a tab or dialog you can. Both &lt;code&gt;dialog&lt;/code&gt; and &lt;code&gt;tab&lt;/code&gt; types allow titles to be specified after a &lt;code&gt;|&lt;/code&gt;, e.g. &lt;code&gt;dialog|My Title&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;log&#34;&gt;log()&lt;/h2&gt;
&lt;p&gt;The log() function writes a message to the processing log with the specified severity.
Severities of INFO, WARN, ERROR and FATAL can be used.
Severities of ERROR and FATAL will result in records being omitted from the output if a RecordOutputFilter is used in the pipeline.
The counts for RecWarn, RecError will be affected by warnings or errors generated in this way therefore this function is useful for adding business rules to XML output.&lt;/p&gt;
&lt;p&gt;E.g. Warn if a SID is not the correct length.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;xsl:if test=&amp;quot;string-length($sid) != 7&amp;quot;&amp;gt;
  &amp;lt;xsl:value-of select=&amp;quot;s:log(&#39;WARN&#39;, concat($sid, &#39; is not the correct length&#39;))&amp;quot;/&amp;gt;
&amp;lt;/xsl:if&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;lookup&#34;&gt;lookup()&lt;/h2&gt;
&lt;p&gt;The lookup() function looks up from reference or context data a value (which can be an XML node set) and adds it to the resultant XML.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;lookup(String map, String key)
lookup(String map, String key, String time)
lookup(String map, String key, String time, Boolean ignoreWarnings)
lookup(String map, String key, String time, Boolean ignoreWarnings, Boolean trace)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt; - The name of the reference data map to perform the lookup against.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt; - The key to lookup. The key can be a simple string, an integer value in a numeric range or a nested lookup key.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time&lt;/code&gt; - Determines which set of reference data was effective at the requested time.
If no reference data exists with an effective time before the requested time then the lookup will fail.
Time is in the format &lt;code&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXX&lt;/code&gt;, e.g. &lt;code&gt;2010-01-01T00:00:00.000Z&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ignoreWarnings&lt;/code&gt; - If true, any lookup failures will be ignored, else they will be reported as warnings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trace&lt;/code&gt; - If true, additional trace information is output as INFO messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the look up fails no result will be returned.
By testing the result a default value may be output if no result is returned.&lt;/p&gt;
&lt;p&gt;E.g. Look up a SID given a PF&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;xsl:variable name=&amp;quot;pf&amp;quot; select=&amp;quot;PFNumber&amp;quot;/&amp;gt;
&amp;lt;xsl:if test=&amp;quot;$pf&amp;quot;&amp;gt;
   &amp;lt;xsl:variable name=&amp;quot;sid&amp;quot; select=&amp;quot;s:lookup(&#39;PF_TO_SID&#39;, $pf, $formattedDateTime)&amp;quot;/&amp;gt;

   &amp;lt;xsl:choose&amp;gt;
      &amp;lt;xsl:when test=&amp;quot;$sid&amp;quot;&amp;gt;
         &amp;lt;User&amp;gt;
             &amp;lt;Id&amp;gt;&amp;lt;xsl:value-of select=&amp;quot;$sid&amp;quot;/&amp;gt;&amp;lt;/Id&amp;gt;
         &amp;lt;/User&amp;gt;
      &amp;lt;/xsl:when&amp;gt;
      &amp;lt;xsl:otherwise&amp;gt;
         &amp;lt;data name=&amp;quot;PFNumber&amp;quot;&amp;gt;
            &amp;lt;xsl:attribute name=&amp;quot;Value&amp;quot;&amp;gt;&amp;lt;xsl:value-of select=&amp;quot;$pf&amp;quot;/&amp;gt;&amp;lt;/xsl:attribute&amp;gt;
         &amp;lt;/data&amp;gt;
      &amp;lt;/xsl:otherwise&amp;gt;
   &amp;lt;/xsl:choose&amp;gt;
&amp;lt;/xsl:if&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;range-lookups&#34;&gt;Range lookups&lt;/h3&gt;
&lt;p&gt;Reference data entries can either be stored with single string key or a key range that defines a numeric range, e.g 1-100.
When a lookup is preformed the passed key is looked up as if it were a normal string key.
If that lookup fails Stroom will try to convert the key to an integer (long) value.
If it can be converted to an integer than a second lookup will be performed against entries with key ranges to see if there is a key range that includes the requested key.&lt;/p&gt;
&lt;p&gt;Range lookups can be used for looking up an IP address where the reference data values are associated with ranges of IP addresses.
In this use case, the IP address must first be converted into a numeric value using &lt;code&gt;numeric-ip()&lt;/code&gt;, e.g:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xslt&#34;&gt;stroom:lookup(&#39;IP_TO_LOCATION&#39;, numeric-ip($ipAddress))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly the reference data must be stored with key ranges whose bounds were created using this function.&lt;/p&gt;
&lt;h3 id=&#34;nested-maps&#34;&gt;Nested Maps&lt;/h3&gt;
&lt;p&gt;The lookup function allows you to perform chained lookups using nested maps.
For example you may have a reference data map called &lt;em&gt;USER_ID_TO_LOCATION&lt;/em&gt; that maps user IDs to some location information for that user and a map called &lt;em&gt;USER_ID_TO_MANAGER&lt;/em&gt; that maps user IDs to the user ID of their manager.
If you wanted to decorate a user&amp;rsquo;s event with the location of their manager you could use a nested map to achieve the lookup chain.
To perform the lookup set the &lt;code&gt;map&lt;/code&gt; argument to the list of maps in the lookup chain, separated by a &lt;code&gt;/&lt;/code&gt;, e.g. &lt;code&gt;USER_ID_TO_MANAGER/USER_ID_TO_LOCATION&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This will perform a lookup against the first map in the list using the requested key.
If a value is found the value will be used as the key in a lookup against the next map.
The value from each map lookup is used as the key in the next map all the way down the chain.
The value from the last lookup is then returned as the result of the &lt;code&gt;lookup()&lt;/code&gt; call.
If no value is found at any point in the chain then that results in no value being returned from the function.&lt;/p&gt;
&lt;p&gt;In order to use nested map lookups each intermediate map must contain simple string values.
The last map in the chain can either contain string values or XML fragment values.&lt;/p&gt;
&lt;h2 id=&#34;put-and-get&#34;&gt;put() and get()&lt;/h2&gt;
&lt;p&gt;You can put values into a map using the &lt;code&gt;put()&lt;/code&gt; function.
These values can then be retrieved later using the &lt;code&gt;get()&lt;/code&gt; function.
Values are stored against a key name so that multiple values can be stored.
These functions can be used for many purposes but are most commonly used to count a number of records that meet certain criteria.&lt;/p&gt;
&lt;p&gt;The map is in the scope of the current pipeline process so values do not live after the stream has been processed.
Also, the map will only contain entries that were &lt;code&gt;put()&lt;/code&gt; within the current pipeline process.&lt;/p&gt;
&lt;p&gt;An example of how to count records is shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- Get the current record count --&amp;gt;
&amp;lt;xsl:variable name=&amp;quot;currentCount&amp;quot; select=&amp;quot;number(s:get(&#39;count&#39;))&amp;quot; /&amp;gt;

&amp;lt;!-- Increment the record count --&amp;gt;
&amp;lt;xsl:variable name=&amp;quot;count&amp;quot;&amp;gt;
  &amp;lt;xsl:choose&amp;gt;
    &amp;lt;xsl:when test=&amp;quot;$currentCount&amp;quot;&amp;gt;
      &amp;lt;xsl:value-of select=&amp;quot;$currentCount + 1&amp;quot; /&amp;gt;
    &amp;lt;/xsl:when&amp;gt;
    &amp;lt;xsl:otherwise&amp;gt;
      &amp;lt;xsl:value-of select=&amp;quot;1&amp;quot; /&amp;gt;
    &amp;lt;/xsl:otherwise&amp;gt;
  &amp;lt;/xsl:choose&amp;gt;
&amp;lt;/xsl:variable&amp;gt;

&amp;lt;!-- Store the count for future retrieval --&amp;gt;
&amp;lt;xsl:value-of select=&amp;quot;s:put(&#39;count&#39;, $count)&amp;quot; /&amp;gt;

&amp;lt;!-- Output the new count --&amp;gt;
&amp;lt;data name=&amp;quot;Count&amp;quot;&amp;gt;
  &amp;lt;xsl:attribute name=&amp;quot;Value&amp;quot; select=&amp;quot;$count&amp;quot; /&amp;gt;
&amp;lt;/data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;parse-uri&#34;&gt;parse-uri()&lt;/h2&gt;
&lt;p&gt;The parse-uri() function takes a Uniform Resource Identifier (URI) in string form and returns an XML node with a namespace of &lt;code&gt;uri&lt;/code&gt; containing the URI&amp;rsquo;s individual components of &lt;code&gt;authority&lt;/code&gt;, &lt;code&gt;fragment&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt;, &lt;code&gt;scheme&lt;/code&gt;, &lt;code&gt;schemeSpecificPart&lt;/code&gt; and &lt;code&gt;userInfo&lt;/code&gt;. See either &lt;a href=&#34;http://www.ietf.org/rfc/rfc2396.txt&#34;&gt;RFC 2306: Uniform Resource Identifiers (URI): Generic Syntax&lt;/a&gt; or Java&amp;rsquo;s java.net.URI Class for details regarding the components.&lt;/p&gt;
&lt;p&gt;The following xml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- Display and parse the URI contained within the text of the rURI element --&amp;gt;
&amp;lt;xsl:variable name=&amp;quot;u&amp;quot; select=&amp;quot;s:parseUri(rURI)&amp;quot; /&amp;gt;

&amp;lt;URI&amp;gt;
  &amp;lt;xsl:value-of select=&amp;quot;rURI&amp;quot; /&amp;gt;
&amp;lt;/URI&amp;gt;
&amp;lt;URIDetail&amp;gt;
  &amp;lt;xsl:copy-of select=&amp;quot;$v&amp;quot;/&amp;gt;
&amp;lt;/URIDetail&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;given the rURI text contains&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   http://foo:bar@w1.superman.com:8080/very/long/path.html?p1=v1&amp;amp;amp;p2=v2#more-details
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;would provide&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;URL&amp;gt;http://foo:bar@w1.superman.com:8080/very/long/path.html?p1=v1&amp;amp;amp;p2=v2#more-details&amp;lt;/URL&amp;gt;
&amp;lt;URIDetail&amp;gt;
  &amp;lt;authority xmlns=&amp;quot;uri&amp;quot;&amp;gt;foo:bar@w1.superman.com:8080&amp;lt;/authority&amp;gt;
  &amp;lt;fragment xmlns=&amp;quot;uri&amp;quot;&amp;gt;more-details&amp;lt;/fragment&amp;gt;
  &amp;lt;host xmlns=&amp;quot;uri&amp;quot;&amp;gt;w1.superman.com&amp;lt;/host&amp;gt;
  &amp;lt;path xmlns=&amp;quot;uri&amp;quot;&amp;gt;/very/long/path.html&amp;lt;/path&amp;gt;
  &amp;lt;port xmlns=&amp;quot;uri&amp;quot;&amp;gt;8080&amp;lt;/port&amp;gt;
  &amp;lt;query xmlns=&amp;quot;uri&amp;quot;&amp;gt;p1=v1&amp;amp;amp;p2=v2&amp;lt;/query&amp;gt;
  &amp;lt;scheme xmlns=&amp;quot;uri&amp;quot;&amp;gt;http&amp;lt;/scheme&amp;gt;
  &amp;lt;schemeSpecificPart xmlns=&amp;quot;uri&amp;quot;&amp;gt;//foo:bar@w1.superman.com:8080/very/long/path.html?p1=v1&amp;amp;amp;p2=v2&amp;lt;/schemeSpecificPart&amp;gt;
  &amp;lt;userInfo xmlns=&amp;quot;uri&amp;quot;&amp;gt;foo:bar&amp;lt;/userInfo&amp;gt;
&amp;lt;/URIDetail&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;pointisinsidexypolygon&#34;&gt;pointIsInsideXYPolygon()&lt;/h2&gt;
&lt;p&gt;Returns true if the specified point is inside the specified polygon.
Useful for determining if a user is inside a physical zone based on their location and the boundary of that zone.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;pointIsInsideXYPolygon(Number xPos, Number yPos, Number[] xPolyData, Number[] yPolyData)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xPos&lt;/code&gt; - The X value of the point to be tested.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yPos&lt;/code&gt; - The Y value of the point to be tested.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xPolyData&lt;/code&gt; - A sequence of X values that define the polygon.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yPolyData&lt;/code&gt; - A sequence of Y values that define the polygon.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list of values supplied for &lt;code&gt;xPolyData&lt;/code&gt; must correspond with the list of values supplied for &lt;code&gt;yPolyData&lt;/code&gt;.
The points that define the polygon must be provided in order, i.e. starting from one point on the polygon and then traveling round the path of the polygon until it gets back to the beginning.&lt;/p&gt;
&lt;!-- TODO add example XSLT --&gt;

      </description>
    </item>
    
  </channel>
</rss>
