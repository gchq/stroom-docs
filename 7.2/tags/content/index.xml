<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stroom â€“ content</title>
    <link>/tags/content/</link>
    <description>Recent content in content on Stroom</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 07 Jun 2023 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/tags/content/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Community: Developing Content</title>
      <link>/community/content/</link>
      <pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/community/content/</guid>
      <description>
        
        
        
&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;TODO&lt;/h4&gt;

    Add content

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Export Content API</title>
      <link>/docs/user-guide/api/export-api/</link>
      <pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-guide/api/export-api/</guid>
      <description>
        
        
        &lt;p&gt;Stroom has &lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#api&#34; title=&#34;Glossary entry for API&#34;&gt;
    &lt;span&gt;API&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt; methods for exporting &lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#content&#34; title=&#34;Glossary entry for content&#34;&gt;
    &lt;span&gt;content&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt; in Stroom to a single zip file.&lt;/p&gt;
&lt;h2 id=&#34;export-all---apiexportv1&#34;&gt;Export All - &lt;code&gt;/api/export/v1&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This method will export all content in Stroom to a single zip file.
This is useful as an alternative backup of the content or where you need to export the content for import into another Stroom instance.&lt;/p&gt;
&lt;p&gt;In order to perform a full export, the user (identified by their API Key) performing the export will need to ensure the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have created an &lt;a href=&#34;../../docs/user-guide/api/#authentication&#34;&gt;API Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The system property &lt;code&gt;stroom.export.enabled&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The user has the application permission &lt;code&gt;Export Configuration&lt;/code&gt; or &lt;code&gt;Administrator&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only those items that the user has &lt;code&gt;Read&lt;/code&gt; permission on will be exported, so to export all items, the user performing the export will need &lt;code&gt;Read&lt;/code&gt; permission on all items or have the &lt;code&gt;Administrator&lt;/code&gt; application permission.&lt;/p&gt;
&lt;h3 id=&#34;performing-an-export&#34;&gt;Performing an Export&lt;/h3&gt;
&lt;p&gt;To export all readable content to a file called &lt;code&gt;export.zip&lt;/code&gt; do something like the following:&lt;/p&gt;

  






&lt;div class=&#34;code-toolbar&#34;&gt;
  &lt;pre 
    class=&#34;command-line language-bash&#34; 
    data-user=&#34;user&#34; 
    data-host=&#34;localhost&#34; 
    data-continuation-str=&#34;\&#34;
    data-filter-output=&#34;(out)&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;TOKEN=&amp;#34;API KEY GOES IN HERE&amp;#34;
curl \
  --silent \
  --request GET \
  --header &amp;#34;Authorization:Bearer ${TOKEN}&amp;#34; \
  --output export.zip \
  https://stroom-fqdn/api/export/v1/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;


    If you encounter problems then replace &lt;code&gt;--silent&lt;/code&gt; with &lt;code&gt;--verbose&lt;/code&gt; to get more information.

&lt;/div&gt;


&lt;h2 id=&#34;export-zip-format&#34;&gt;Export Zip Format&lt;/h2&gt;
&lt;p&gt;The export zip will contain a number of files for each &lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#document&#34; title=&#34;Glossary entry for document&#34;&gt;
    &lt;span&gt;document&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt; exported.
The number and type of these files will depend on the type of document, however every document will have the following two file types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.node&lt;/code&gt; - This file represents the document&amp;rsquo;s location in the explorer tree along with its name and UUID.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.meta&lt;/code&gt; - This is the metadata for the document independent of the explorer tree.
It contains the name, type and UUID of the document along with the unique identifier for the version of the document.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Documents may also have files like these (a non-exhaustive list):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.json&lt;/code&gt; - JSON data holding the content of the document, as used for Dashboards.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.txt&lt;/code&gt; - Plain text data holding the content of the document, as used for Dictionaries.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.xml&lt;/code&gt; - XML data holding the content of the document, as used for Pipelines.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.xsd&lt;/code&gt; - XML Schema content.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.xsl&lt;/code&gt; - XSLT content.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following is an example of the content of an export zip file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;TEST_FEED_CERT.Feed.fcee4270-a479-4cc0-a79c-0e8f18a4bad8.meta
TEST_FEED_CERT.Feed.fcee4270-a479-4cc0-a79c-0e8f18a4bad8.node
TEST_FEED_PROXY.Feed.f06d4416-8b0e-4774-94a9-729adc5633aa.meta
TEST_FEED_PROXY.Feed.f06d4416-8b0e-4774-94a9-729adc5633aa.node
TEST_REFERENCE_DATA_EVENTS_XXX.XSLT.4f74999e-9d69-47c7-97f7-5e88cc7459f7.meta
TEST_REFERENCE_DATA_EVENTS_XXX.XSLT.4f74999e-9d69-47c7-97f7-5e88cc7459f7.xsl
TEST_REFERENCE_DATA_EVENTS_XXX.XSLT.4f74999e-9d69-47c7-97f7-5e88cc7459f7.node
Standard_Pipelines/Reference_Loader.Pipeline.da1c7351-086f-493b-866a-b42dbe990700.xml
Standard_Pipelines/Reference_Loader.Pipeline.da1c7351-086f-493b-866a-b42dbe990700.meta
Standard_Pipelines/Reference_Loader.Pipeline.da1c7351-086f-493b-866a-b42dbe990700.node
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;filenames&#34;&gt;Filenames&lt;/h3&gt;
&lt;p&gt;When documents are added to the zip, they are added with a directory structure that mirrors the explorer tree.&lt;/p&gt;
&lt;p&gt;The filenames are of the form:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;lt;name&amp;gt;.&amp;lt;type&amp;gt;.&amp;lt;UUID&amp;gt;.&amp;lt;extension&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As Stroom allows characters in document and folder names that would not be supported in operating system paths (or cause confusion), some characters in the name/directory parts are replaced by &lt;code&gt;_&lt;/code&gt; to avoid this. e.g. &lt;code&gt;Dashboard 01/02/2020&lt;/code&gt; would become &lt;code&gt;Dashboard_01_02_2020&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you need to see the contents of the zip as if viewing it within Stroom you can run this bash script in the root of the extracted zip.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env bash

shopt -s globstar
for node_file in **/*.node; do
  name=
  name=&amp;quot;$(grep -o -P &amp;quot;(?&amp;lt;=name=).*&amp;quot; &amp;quot;${node_file}&amp;quot; )&amp;quot;
  path=
  path=&amp;quot;$(grep -o -P &amp;quot;(?&amp;lt;=path=).*&amp;quot; &amp;quot;${node_file}&amp;quot; )&amp;quot;

  echo &amp;quot;./${path}/${name}   (./${node_file})&amp;quot;
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will output something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;./Standard Pipelines/Json/Events to JSON   (./Standard_Pipelines/Json/Events_to_JSON.XSLT.1c3d42c2-f512-423f-aa6a-050c5cad7c0f.node)
./Standard Pipelines/Json/JSON Extraction   (./Standard_Pipelines/Json/JSON_Extraction.Pipeline.13143179-b494-4146-ac4b-9a6010cada89.node)
./Standard Pipelines/Json/JSON Search Extraction   (./Standard_Pipelines/Json/JSON_Search_Extraction.XSLT.a8c1aa77-fb90-461a-a121-d4d87d2ff072.node)
./Standard Pipelines/Reference Loader   (./Standard_Pipelines/Reference_Loader.Pipeline.da1c7351-086f-493b-866a-b42dbe990700.node)
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Documenting content</title>
      <link>/docs/user-guide/content/documentation/</link>
      <pubDate>Wed, 07 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-guide/content/documentation/</guid>
      <description>
        
        
        &lt;p&gt;The screen for each &lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#entity&#34; title=&#34;Glossary entry for Entity&#34;&gt;
    &lt;span&gt;Entity&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt; in Stroom has a &lt;em&gt;Documentation&lt;/em&gt; sub-tab.
The purpose of this sub-tab is to allow the user to provide any documentation about the &lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#entity&#34; title=&#34;Glossary entry for entity&#34;&gt;
    &lt;span&gt;entity&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt; that is relevant.
For example a user might want to provide information about the system that a &lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#feed&#34; title=&#34;Glossary entry for Feed&#34;&gt;
    &lt;span&gt;Feed&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt; receives data from, or document the purpose of a complex XSLT translation.&lt;/p&gt;
&lt;p&gt;In previous versions of stroom this documentation was a small and simple &lt;em&gt;Description&lt;/em&gt; text field, however now it is a full screen of rich text.
This screen defaults to its read-only preview mode, but the user can toggle it to the edit mode to edit the content.
In the edit mode, the documentation can be created/edited using plain text, or &lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#markdown&#34; title=&#34;Glossary entry for Markdown&#34;&gt;
    &lt;span&gt;Markdown&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;.
Markdown is a fairly simple markup language for producing richly formatted text from plain text.&lt;/p&gt;
&lt;p&gt;There are many variants of markdown that all have subtly different features or syntax.
Stroom uses the 






  

&lt;span class=&#34;external-link&#34;&gt;
  &lt;a href=&#34;https://github.com/showdownjs/showdown/wiki/Showdown%27s-Markdown-syntax&#34; target=&#34;_blank&#34; class=&#34;&#34; style=&#34;&#34; title=&#34;Showdown (external link)&#34;&gt;
    &lt;span&gt;Showdown&lt;/span&gt;
    &lt;i class=&#34;external-link-icon fas fa-external-link-alt fa-sm text-secondary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;
 markdown converter to render users&amp;rsquo; markdown content into formatted text.
This link is the definitive source for supported markdown syntax.&lt;/p&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;


    The &lt;em&gt;Showdown&lt;/em&gt; markdown processor used in stroom is &lt;strong&gt;not&lt;/strong&gt; the same as the markdown processor used within this  documentation site (&lt;em&gt;stroom-docs&lt;/em&gt;), so there may be some subtle differences in syntax.

&lt;/div&gt;


&lt;h2 id=&#34;example-markdown-content&#34;&gt;Example Markdown Content&lt;/h2&gt;
&lt;p&gt;The following is a brief guide to the most common formatting that can be done with markdown and that is supported in Stroom.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# Markdown Example

This is an example of a markdown document.


## Headings Example

This is at level 2.


### Heading Level 3

This is at level 3.


#### Heading Level 4

This is at level 4.


## Text Styles

**bold**, __bold__, *italic*, _italic_, ***bold and italic***, ~~strike-through~~


## Bullets 

Use four spaces to indent a sub-item.

* Bullet 1
    * Bullet 1a
* Bullet 2
    * Bullet 2a

## Numbered Lists

Use four spaces to indent a sub-item.
Using `1` for all items means the makrdown processor will replace them with the correct number, making it easier to re-order items.

1. Item 1
    1. Item 1a
    1. Item 1b
1. Item 2
    1. Item 2a
    1. Item 2b

## Quoted Text

&amp;gt; This is a quote.

Text

&amp;gt; This is another quote.  
&amp;gt; It has multiple lines...
&amp;gt;
&amp;gt; ...and gaps and bullets
&amp;gt; * Item 1
&amp;gt; * Item 2


## Tables

Note `---:` to right align a column, `:---:` to center align it.

| Syntax      | Description | Value | Fruit  |
| ----------- | ----------- | -----:| :----: |
| Row 1       | Title       | 1     | Pear   |
| Row 2       | Text        | 10    | Apple  |
| Row 3       | Text        | 100   | Kiwi   |
| Row 4       | Text        | 1000  | Orange |

Table using `&amp;lt;br&amp;gt;` for multi-line cells.

| Name      | Description     |
|-----------|-----------------|
| Row 1     | Line 1&amp;lt;br&amp;gt;Line2 |
| Row 2     | Line 1&amp;lt;br&amp;gt;Line2 |


## Links

Line: [title](https://www.example.com)


## Simple Lists

Add two spaces to the end of each line to stop each line being treated as a paragraph.

One  
Two  
Three  

## Paragraphs

Lines not separated by a blank line will be joined together with a space between them.
Stroom will wrap long lines when rendered.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

## Task Lists

The `X` indicates a task has been completed.

* [x] Write the press release
* [ ] Update the website
* [ ] Contact the media


## Images

A non-standard syntax is supported to render images at a set size in the form of `&amp;lt;width&amp;gt;x&amp;lt;height&amp;gt;`.
Use a `*` for one of the dimensions to scale it proportionately.

![This is my alt text](images/logo.svg =200x* &amp;quot;This is my tooltip title&amp;quot;)

## Separator

This is a horizontal rule separator

---

## Code

Code can be represented in-line like this `echo &amp;quot;hello world&amp;quot;` by surround it with single back-ticks.

Multi-line blocks of code can rendered with the appropriate syntax highlighting using a fenced block comprising three back-ticks.
Specify the language after the first set of three back ticks, or `text` for plain text.
Only certain languages are supported in Stroom.

**JSON**
```json
{
  &amp;quot;key1&amp;quot;: &amp;quot;some text&amp;quot;,
  &amp;quot;key2&amp;quot;: 123
}
```

**XML**
```xml
  &amp;lt;record&amp;gt;
    &amp;lt;data name=&amp;quot;dateTime&amp;quot; value=&amp;quot;2020-09-28T14:30:33.476&amp;quot; /&amp;gt;
    &amp;lt;data name=&amp;quot;machineIp&amp;quot; value=&amp;quot;19.141.201.14&amp;quot; /&amp;gt;
  &amp;lt;/record&amp;gt;
```

**bash**
```bash
#!/bin/bash
now=&amp;quot;$(date)&amp;quot;
computer_name=&amp;quot;$(hostname)&amp;quot;
echo &amp;quot;Current date and time : $now&amp;quot;
echo &amp;quot;Computer name : $computer_name&amp;quot;
```
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;wrapping&#34;&gt;Wrapping&lt;/h2&gt;
&lt;p&gt;Long paragraphs will be wrapped&lt;/p&gt;
&lt;h2 id=&#34;code-syntax-highlighting&#34;&gt;Code Syntax Highlighting&lt;/h2&gt;
&lt;p&gt;This is an example of a fenced code block.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;```xml
  &amp;lt;record&amp;gt;
    &amp;lt;data name=&amp;quot;dateTime&amp;quot; value=&amp;quot;2020-09-28T14:30:33.476&amp;quot; /&amp;gt;
  &amp;lt;/record&amp;gt;
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, &lt;code&gt;xml&lt;/code&gt; defines the language used within the fenced block.&lt;/p&gt;
&lt;p&gt;Stroom supports the following languages for fenced code blocks.
If you require additional languages then please raised a ticket 






  

&lt;span class=&#34;external-link&#34;&gt;
  &lt;a href=&#34;https://github.com/gchq/stroom/issues&#34; target=&#34;_blank&#34; class=&#34;&#34; style=&#34;&#34; title=&#34;here (external link)&#34;&gt;
    &lt;span&gt;here&lt;/span&gt;
    &lt;i class=&#34;external-link-icon fas fa-external-link-alt fa-sm text-secondary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt;
. If your language is not currently supported or is just plain text then use &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;text&lt;/li&gt;
&lt;li&gt;sh&lt;/li&gt;
&lt;li&gt;bash&lt;/li&gt;
&lt;li&gt;xml&lt;/li&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;javascript&lt;/li&gt;
&lt;li&gt;csv&lt;/li&gt;
&lt;li&gt;regex&lt;/li&gt;
&lt;li&gt;powershell&lt;/li&gt;
&lt;li&gt;sql&lt;/li&gt;
&lt;li&gt;json&lt;/li&gt;
&lt;li&gt;yaml&lt;/li&gt;
&lt;li&gt;properties&lt;/li&gt;
&lt;li&gt;toml&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fenced blocks with content that is wider than the pane will result in the fenced block having its own horizontal scroll bar.&lt;/p&gt;
&lt;h2 id=&#34;escaping-characters&#34;&gt;Escaping Characters&lt;/h2&gt;
&lt;p&gt;It is common to use &lt;code&gt;_&lt;/code&gt; characters in &lt;span class=&#34;glossary-link&#34;&gt;
  &lt;a href=&#34;../../docs/glossary/#feed&#34; title=&#34;Glossary entry for Feed&#34;&gt;
    &lt;span&gt;Feed&lt;/span&gt;
    &lt;i class=&#34;glossary-link-icon fas fa-book fa-sm text-primary&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/span&gt; names, however if there are two of these in a word then the markdown processor will interpret them as &lt;em&gt;italic&lt;/em&gt; markup.
To prevent this, either surround the word with back ticks to be rendered as code or escape each underscore with a &lt;code&gt;\&lt;/code&gt;, i.e. &lt;code&gt;THIS\_IS\_MY\_FEED&lt;/code&gt;. THIS_IS_MY_FEED.&lt;/p&gt;
&lt;h2 id=&#34;html&#34;&gt;HTML&lt;/h2&gt;
&lt;p&gt;While it is possible to use HTML in the documentation, its use is not recomended as it increases the complexity of the documentation content and requires that other users have knowledge of HTML.
Markdown should be sufficient for most cases, with the possible exception of complex tables where HTML may be prefereable.&lt;/p&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;


    No form of HTML scripting (i.e. Javascript) is supported within the documentation content.

&lt;/div&gt;



      </description>
    </item>
    
    <item>
      <title>Docs: User Content</title>
      <link>/docs/user-guide/content/</link>
      <pubDate>Wed, 07 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>/docs/user-guide/content/</guid>
      <description>
        
        
        
      </description>
    </item>
    
  </channel>
</rss>
